{
    "swagger": "2.0",
    "info": {
        "description": "This API allows you to interact with the VictorOps platform in various ways. Your account may be limited\nto a total number of API calls per month. Also, some of these API calls have rate limits.\n\nNOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API\nviewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not\nprocess the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before\nsubmitting the curl request.\n",
        "version": "0.0.2",
        "title": "VictorOps API"
    },
    "host": "api.victorops.com",
    "basePath": "/",
    "tags": [
        {
            "name": "On-call"
        },
        {
            "name": "Incidents"
        },
        {
            "name": "Alerts"
        },
        {
            "name": "Reporting"
        },
        {
            "name": "Users"
        },
        {
            "name": "User Contact Methods"
        },
        {
            "name": "User Paging Policies"
        },
        {
            "name": "Personal Paging Policy Values"
        },
        {
            "name": "Personal Paging Policies"
        },
        {
            "name": "Teams"
        },
        {
            "name": "Escalation Policies"
        },
        {
            "name": "Routing Keys"
        }
    ],
    "schemes": [
        "https"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/api-public/v1/user": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List users",
                "description": "Get a list of users for your organization\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of users for your organization",
                        "schema": {
                            "$ref": "#/definitions/ListUserResponse"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "422": {
                        "description": "You have reached your user limit.\n"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Add a user",
                "description": "Add a user to your organization\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddUserPayload"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Some details about the user that was added",
                        "schema": {
                            "$ref": "#/definitions/AddUserResponse"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "422": {
                        "description": "Username or email is unavailable, or you have reached your user limit.\n"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/user/{user}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Retrieve information for a user",
                "description": "Get the information for the specified user\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user to fetch",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Some details about the user that was added",
                        "schema": {
                            "$ref": "#/definitions/AddUserResponse"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "422": {
                        "description": "Username or email is unavailable, or you have reached your user limit.\n"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update a user",
                "description": "Update the designated user\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user to be updated",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddUserPayload"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Some details about the user that was added",
                        "schema": {
                            "$ref": "#/definitions/AddUserResponse"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "422": {
                        "description": "Username or email is unavailable, or you have reached your user limit.\n"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Remove a user",
                "description": "Remove a user from your organization\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user to be deleted",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeleteUserPayload"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User was deleted"
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "422": {
                        "description": "There was a problem with the delete such as the replacement user was not found.\n"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/policies/types/notifications": {
            "get": {
                "tags": [
                    "Personal Paging Policy Values"
                ],
                "summary": "Get the available notification types",
                "description": "Get the available notification types\n\ndescription: \"Send a push notification to all my devices\", type: \"push\"\ndescription: \"Send an email to an email address\", type: \"email\"\ndescription: \"Send an SMS to a phone number\", type: \"sms\"\ndescription: \"Make a phone call to a phone number\", type: \"phone\"\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All the available contact types",
                        "schema": {
                            "$ref": "#/definitions/inline_response_200"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/policies/types/contacts": {
            "get": {
                "tags": [
                    "Personal Paging Policy Values"
                ],
                "summary": "Get the available contact types",
                "description": "Get the available contact types\n\ndescription: \"Email Address\", type: \"email\"\ndescription: \"Phone Number\", type: \"phone\"\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All the available contact types",
                        "schema": {
                            "$ref": "#/definitions/inline_response_200_1"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/policies/types/timeouts": {
            "get": {
                "tags": [
                    "Personal Paging Policy Values"
                ],
                "summary": "Get the available timeout values",
                "description": "Get the available timeout values\n\ndescription: \"If still unacked after 1 minute\", type: 1\ndescription: \"If still unacked after 5 minutes\", type: 5\ndescription: \"If still unacked after 10 minutes\", type: 10\ndescription: \"If still unacked after 15 minutes\", type: 15\ndescription: \"If still unacked after 20 minutes\", type: 20\ndescription: \"If still unacked after 25 minutes\", type: 25\ndescription: \"If still unacked after 30 minutes\", type: 30\ndescription: \"If still unacked after 45 minutes\", type: 45\ndescription: \"If still unacked after 60 minutes\", type: 60\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All the available timeout types.",
                        "schema": {
                            "$ref": "#/definitions/inline_response_200_2"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/profile/{username}/policies": {
            "get": {
                "tags": [
                    "Personal Paging Policies"
                ],
                "summary": "Get the user's paging policy",
                "description": "Get all the paging policy steps for the user on the org associated with the API key\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "Your username",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Username"
                    },
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All steps of the user's paging policy",
                        "schema": {
                            "$ref": "#/definitions/inline_response_200_3"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Personal Paging Policies"
                ],
                "summary": "Create a paging policy step",
                "description": "Create a paging policy step\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "Your username",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Username"
                    },
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddGroupPayload"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created paging policy step",
                        "schema": {
                            "$ref": "#/definitions/inline_response_200_4"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/profile/{username}/policies/{step}": {
            "get": {
                "tags": [
                    "Personal Paging Policies"
                ],
                "summary": "Get a paging policy step",
                "description": "Get a paging policy step\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "Your username",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Username"
                    },
                    {
                        "name": "step",
                        "in": "path",
                        "description": "Paging policy step",
                        "required": true,
                        "type": "number",
                        "x-exportParamName": "Step"
                    },
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The paging policy step",
                        "schema": {
                            "$ref": "#/definitions/inline_response_200_4"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Personal Paging Policies"
                ],
                "summary": "Create a rule for a paging policy step",
                "description": "Create a rule for a paging policy step\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "Your username",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Username"
                    },
                    {
                        "name": "step",
                        "in": "path",
                        "description": "Paging policy step",
                        "required": true,
                        "type": "number",
                        "x-exportParamName": "Step"
                    },
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddStepPayload"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created rule for the paging policy step",
                        "schema": {
                            "$ref": "#/definitions/inline_response_200_5"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Personal Paging Policies"
                ],
                "summary": "Update a paging policy step",
                "description": "Update a paging policy step\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "Your username",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Username"
                    },
                    {
                        "name": "step",
                        "in": "path",
                        "description": "Paging policy step",
                        "required": true,
                        "type": "number",
                        "x-exportParamName": "Step"
                    },
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddGroupPayload"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated paging policy step",
                        "schema": {
                            "$ref": "#/definitions/inline_response_200_4"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/profile/{username}/policies/{step}/{rule}": {
            "get": {
                "tags": [
                    "Personal Paging Policies"
                ],
                "summary": "Get a rule from a paging policy step",
                "description": "Get a rule from a paging policy step\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "Your username",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Username"
                    },
                    {
                        "name": "step",
                        "in": "path",
                        "description": "Paging policy step",
                        "required": true,
                        "type": "number",
                        "x-exportParamName": "Step"
                    },
                    {
                        "name": "rule",
                        "in": "path",
                        "description": "Rule for a paging policy step",
                        "required": true,
                        "type": "number",
                        "x-exportParamName": "Rule"
                    },
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The rule from the paging policy step",
                        "schema": {
                            "$ref": "#/definitions/inline_response_200_5"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Personal Paging Policies"
                ],
                "summary": "Update a rule for a paging policy step",
                "description": "Update a rule for a paging policy step\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "Your username",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Username"
                    },
                    {
                        "name": "step",
                        "in": "path",
                        "description": "Paging policy step",
                        "required": true,
                        "type": "number",
                        "x-exportParamName": "Step"
                    },
                    {
                        "name": "rule",
                        "in": "path",
                        "description": "Rule for a paging policy step",
                        "required": true,
                        "type": "number",
                        "x-exportParamName": "Rule"
                    },
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddStepPayload"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated rule for the paging policy step",
                        "schema": {
                            "$ref": "#/definitions/inline_response_200_5"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Personal Paging Policies"
                ],
                "summary": "Delete a rule from a paging policy step",
                "description": "Delete a rule from a paging policy step\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "Your username",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Username"
                    },
                    {
                        "name": "step",
                        "in": "path",
                        "description": "Paging policy step",
                        "required": true,
                        "type": "number",
                        "x-exportParamName": "Step"
                    },
                    {
                        "name": "rule",
                        "in": "path",
                        "description": "Rule for a paging policy step",
                        "required": true,
                        "type": "number",
                        "x-exportParamName": "Rule"
                    },
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The deleted rule from the paging policy step",
                        "schema": {
                            "$ref": "#/definitions/inline_response_200_5"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/user/{user}/contact-methods": {
            "get": {
                "tags": [
                    "User Contact Methods"
                ],
                "summary": "Get a list of all contact methods for a user",
                "description": "Get the contact methods for a user\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All available contact methods for the user",
                        "schema": {
                            "$ref": "#/definitions/inline_response_200_6"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/user/{user}/contact-methods/devices": {
            "get": {
                "tags": [
                    "User Contact Methods"
                ],
                "summary": "Get a list of all contact devices for a user",
                "description": "Get the contact methods for a user\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of contact devices for the user",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactDevice"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/user/{user}/contact-methods/devices/{contactId}": {
            "get": {
                "tags": [
                    "User Contact Methods"
                ],
                "summary": "Get the indicated contact device for a user",
                "description": "Get the indicated contact device for a user\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    },
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "The unique contact identifier",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "ContactId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of contact devices for the user",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ContactDevice"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "User Contact Methods"
                ],
                "summary": "Update a contact device for a user",
                "description": "Update a contact device for a user\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    },
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "The unique contact identifier",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "ContactId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The contact device",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactDeviceAdd"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of contact devices for the user",
                        "schema": {
                            "$ref": "#/definitions/ContactDevice"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "User Contact Methods"
                ],
                "summary": "Delete a contact device for a user",
                "description": "Delete a contact device for a user\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    },
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "The unique contact identifier",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "ContactId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted contact device for the user",
                        "schema": {
                            "$ref": "#/definitions/ContactDevice"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/user/{user}/contact-methods/emails": {
            "get": {
                "tags": [
                    "User Contact Methods"
                ],
                "summary": "Get a list of all contact emails for a user",
                "description": "Get the contact emails for a user\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of contact emails for the user",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserContact"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "User Contact Methods"
                ],
                "summary": "Create a contact emails for a user",
                "description": "Create a contact email for a user\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The contact email",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactEmailAdd"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of contact emails for the user",
                        "schema": {
                            "$ref": "#/definitions/UserContact"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/user/{user}/contact-methods/emails/{contactId}": {
            "get": {
                "tags": [
                    "User Contact Methods"
                ],
                "summary": "Get the indicate contact email for a user",
                "description": "Get the indicated contact email for a user\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    },
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "The unique contact identifier",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "ContactId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The indicated contact email for the user",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserContact"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "User Contact Methods"
                ],
                "summary": "Delete a contact email for a user",
                "description": "Delete the indicated contact email for the user\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    },
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "The unique contact identifier",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "ContactId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted contact email for the user",
                        "schema": {
                            "$ref": "#/definitions/UserContact"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/user/{user}/contact-methods/phones": {
            "get": {
                "tags": [
                    "User Contact Methods"
                ],
                "summary": "Get a list of all contact phones for a user",
                "description": "Get the contact phones for a user\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of contact phones for the user",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserContact"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "User Contact Methods"
                ],
                "summary": "Create a contact phones for a user",
                "description": "Create a contact phone for a user\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The contact phone",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactPhoneAdd"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of contact phones for the user",
                        "schema": {
                            "$ref": "#/definitions/UserContact"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/user/{user}/contact-methods/phones/{contactId}": {
            "get": {
                "tags": [
                    "User Contact Methods"
                ],
                "summary": "Get the indicate contact phone for a user",
                "description": "Get the indicated contact phone for a user\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    },
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "The unique contact identifier",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "ContactId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The indicated contact phone for the user",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserContact"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "User Contact Methods"
                ],
                "summary": "Delete a contact phone for a user",
                "description": "Delete the indicated contact phone for the user\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    },
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "The unique contact identifier",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "ContactId"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted contact phone for the user",
                        "schema": {
                            "$ref": "#/definitions/UserContact"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/user/{user}/policies": {
            "get": {
                "tags": [
                    "User Paging Policies"
                ],
                "summary": "Get a list of paging policies for a user",
                "description": "Get paging policies for a user\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All configured paging policies for a user",
                        "schema": {
                            "$ref": "#/definitions/Policies"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/user/{user}/oncall/schedule": {
            "get": {
                "tags": [
                    "On-call"
                ],
                "summary": "Get a user's on-call schedule",
                "description": "__NOTE: This call is deprecated. Please use `GET /api-public/v2/user/{user}/oncall/schedule`.__\n\nGet the on-call schedule for a user for all teams, including on-call overrides.\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    },
                    {
                        "name": "daysForward",
                        "in": "query",
                        "description": "Days to include in returned schedule (30 max)",
                        "required": false,
                        "type": "number",
                        "default": 14,
                        "maximum": 30,
                        "minimum": 0,
                        "x-exportParamName": "DaysForward"
                    },
                    {
                        "name": "daysSkip",
                        "in": "query",
                        "description": "Days to skip before computing schedule to return (90 max)",
                        "required": false,
                        "type": "number",
                        "default": 0,
                        "maximum": 90,
                        "minimum": 0,
                        "x-exportParamName": "DaysSkip"
                    },
                    {
                        "name": "step",
                        "in": "query",
                        "description": "Step of escalation policy (3 max)",
                        "required": false,
                        "type": "number",
                        "default": 0,
                        "maximum": 3,
                        "minimum": 0,
                        "x-exportParamName": "Step"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The on-call schedule for the user",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/OnCallAndOverrides"
                            }
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": true
            }
        },
        "/api-public/v2/user/{user}/oncall/schedule": {
            "get": {
                "tags": [
                    "On-call"
                ],
                "summary": "Get a user's on-call schedule",
                "description": "Get the on-call schedule for a user for all teams the user is on, including on-call overrides.\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The VictorOps user ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    },
                    {
                        "name": "daysForward",
                        "in": "query",
                        "description": "Days to include in returned schedule (30 max)",
                        "required": false,
                        "type": "number",
                        "default": 14,
                        "maximum": 30,
                        "minimum": 0,
                        "x-exportParamName": "DaysForward"
                    },
                    {
                        "name": "daysSkip",
                        "in": "query",
                        "description": "Days to skip before computing schedule to return (90 max)",
                        "required": false,
                        "type": "number",
                        "default": 0,
                        "maximum": 90,
                        "minimum": 0,
                        "x-exportParamName": "DaysSkip"
                    },
                    {
                        "name": "step",
                        "in": "query",
                        "description": "Step of escalation policy (3 max)",
                        "required": false,
                        "type": "number",
                        "default": 0,
                        "maximum": 3,
                        "minimum": 0,
                        "x-exportParamName": "Step"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The on-call schedule for the user",
                        "schema": {
                            "$ref": "#/definitions/UserSchedule"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/team/{team}/oncall/schedule": {
            "get": {
                "tags": [
                    "On-call"
                ],
                "summary": "Get a team's on-call schedule",
                "description": "__NOTE: This call is deprecated. Please use `GET /api-public/v2/team/{team}/oncall/schedule`.__\n\nGet the on-call schedule for a team, including on-call overrides.\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "team",
                        "in": "path",
                        "description": "The VictorOps team 'slug'",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Team"
                    },
                    {
                        "name": "daysForward",
                        "in": "query",
                        "description": "Days to include in returned schedule (30 max)",
                        "required": false,
                        "type": "number",
                        "default": 14,
                        "maximum": 30,
                        "minimum": 0,
                        "x-exportParamName": "DaysForward"
                    },
                    {
                        "name": "daysSkip",
                        "in": "query",
                        "description": "Days to skip before computing schedule to return (90 max)",
                        "required": false,
                        "type": "number",
                        "default": 0,
                        "maximum": 90,
                        "minimum": 0,
                        "x-exportParamName": "DaysSkip"
                    },
                    {
                        "name": "step",
                        "in": "query",
                        "description": "Step of escalation policy (3 max)",
                        "required": false,
                        "type": "number",
                        "default": 0,
                        "maximum": 3,
                        "minimum": 0,
                        "x-exportParamName": "Step"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The on-call schedule for the team",
                        "schema": {
                            "$ref": "#/definitions/OnCallAndOverrides"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Team not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": true
            }
        },
        "/api-public/v2/team/{team}/oncall/schedule": {
            "get": {
                "tags": [
                    "On-call"
                ],
                "summary": "Get a team's on-call schedule",
                "description": "Get the on-call schedule for a team, including on-call overrides.\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "team",
                        "in": "path",
                        "description": "The VictorOps team 'slug'",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Team"
                    },
                    {
                        "name": "daysForward",
                        "in": "query",
                        "description": "Days to include in returned schedule (30 max)",
                        "required": false,
                        "type": "number",
                        "default": 14,
                        "maximum": 30,
                        "minimum": 0,
                        "x-exportParamName": "DaysForward"
                    },
                    {
                        "name": "daysSkip",
                        "in": "query",
                        "description": "Days to skip before computing schedule to return (90 max)",
                        "required": false,
                        "type": "number",
                        "default": 0,
                        "maximum": 90,
                        "minimum": 0,
                        "x-exportParamName": "DaysSkip"
                    },
                    {
                        "name": "step",
                        "in": "query",
                        "description": "Step of escalation policy (3 max)",
                        "required": false,
                        "type": "number",
                        "default": 0,
                        "maximum": 3,
                        "minimum": 0,
                        "x-exportParamName": "Step"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The on-call schedule for the team",
                        "schema": {
                            "$ref": "#/definitions/TeamSchedule"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Team not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/oncall/current": {
            "get": {
                "tags": [
                    "On-call"
                ],
                "summary": "Get an organization's on-call users",
                "description": "Get all on-call uesrs/teams for your organization.\n\nThis API may be called a maximum of 1 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All users and escalation policies currently on call",
                        "schema": {
                            "$ref": "#/definitions/inline_response_200_7"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-reporting/v1/team/{team}/oncall/log": {
            "get": {
                "tags": [
                    "Reporting"
                ],
                "summary": "A list of shift changes for a team",
                "description": "Returns a log of user shift changes for the specified team. This is historical\ndata, and may be up to 15 minutes behind real-time log data.\n\nThis API may be called a maximum of 6 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "team",
                        "in": "path",
                        "description": "The VictorOps team 'slug'",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Team"
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format",
                        "required": false,
                        "type": "string",
                        "format": "date-time",
                        "x-exportParamName": "Start"
                    },
                    {
                        "name": "end",
                        "in": "query",
                        "description": "Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format",
                        "required": false,
                        "type": "string",
                        "format": "date-time",
                        "x-exportParamName": "End"
                    },
                    {
                        "name": "userName",
                        "in": "query",
                        "description": "The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned",
                        "required": false,
                        "type": "string",
                        "x-exportParamName": "UserName"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The result of the take request",
                        "schema": {
                            "$ref": "#/definitions/OnCallLog"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Team or user(s) not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/team/{team}/oncall/user": {
            "patch": {
                "tags": [
                    "On-call"
                ],
                "summary": "Create an on-call override (take on-call)",
                "description": "__NOTE: This API call is deprecated. Please use `PATCH /api-public/v2/policies/{policy}/oncall/user`__\n\nReplaces a currently on-call user on the team with another.\n\nThis API may be called a maximum of 6 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The take on-call payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TakeRequest"
                        },
                        "x-exportParamName": "Body"
                    },
                    {
                        "name": "team",
                        "in": "path",
                        "description": "The VictorOps team 'slug'",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Team"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The result of the take request",
                        "schema": {
                            "$ref": "#/definitions/TakeResult"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Team or user(s) not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": true
            }
        },
        "/api-public/v1/policies/{policy}/oncall/user": {
            "patch": {
                "tags": [
                    "On-call"
                ],
                "summary": "Create an on-call override (take on-call)",
                "description": "Replaces a currently on-call user in the escalation policy with another.  In many cases, the policy slug\nwill match the slug of the team that contains it.\n\nThis API may be called a maximum of 6 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The take on-call payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TakeRequest"
                        },
                        "x-exportParamName": "Body"
                    },
                    {
                        "name": "policy",
                        "in": "path",
                        "description": "The VictorOps policy 'slug'",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Policy"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The result of the take request",
                        "schema": {
                            "$ref": "#/definitions/TakeResult"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Team or user(s) not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/incidents": {
            "get": {
                "tags": [
                    "Incidents"
                ],
                "summary": "Get current incident information",
                "description": "Get a list of the currently open, acknowledged and recently resolved incidents.\nThis API may be called a maximum of 6 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The set of incidents.\n",
                        "schema": {
                            "$ref": "#/definitions/ActiveIncidentList"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Path not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Incidents"
                ],
                "summary": "Create a new incident",
                "description": "Create a new incident.\n\nThis call replicates the function of our\n<a href=\"https://help.victorops.com/knowledge-base/manual-incident-creation/\">manual incident creation process</a>.\nMonitoring tools and custom integrations\nshould be configured using our\n<a href=\"https://help.victorops.com/knowledge-base/victorops-restendpoint-integration/\">REST Endpoint</a>.\n\nThis API may be called a maximum of 6 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The incident details",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateIncidentRequest"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the incident created\n",
                        "schema": {
                            "$ref": "#/definitions/CreatedIncident"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Path not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/incidents/ack": {
            "patch": {
                "tags": [
                    "Incidents"
                ],
                "summary": "Acknowledge an incident or list of incidents",
                "description": "The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.\n\nThis API may be called a maximum of 6 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Ack/Resolve payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AckOrResolveRequest"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The result of each acknowledge incident action.",
                        "schema": {
                            "$ref": "#/definitions/AckOrResolveResponse"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/incidents/reroute": {
            "post": {
                "tags": [
                    "Incidents"
                ],
                "summary": "Reroute one or more incidents to one or more new routable destinations.",
                "description": "Reroute one or more incidents to one or more users and/or escalation policies\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The reroute rules",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RerouteCollection"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created reroute object",
                        "schema": {
                            "$ref": "#/definitions/RerouteStatusResponse"
                        }
                    }
                }
            }
        },
        "/api-public/v1/incidents/resolve": {
            "patch": {
                "tags": [
                    "Incidents"
                ],
                "summary": "Resolve an incident or list of incidents",
                "description": "The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.\n\nThis API may be called a maximum of 6 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Ack/Resolve payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AckOrResolveRequest"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The result of each resolve incident action.",
                        "schema": {
                            "$ref": "#/definitions/AckOrResolveResponse"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/incidents/byUser/ack": {
            "patch": {
                "tags": [
                    "Incidents"
                ],
                "summary": "Acknowledge all incidents for which a user was paged.",
                "description": "The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.\n\nThis API may be called a maximum of 6 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Ack/Resolve payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AckOrResolveByUserRequest"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The result of each acknowledge incident action.",
                        "schema": {
                            "$ref": "#/definitions/AckOrResolveResponse"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/incidents/byUser/resolve": {
            "patch": {
                "tags": [
                    "Incidents"
                ],
                "summary": "Resolve all incidents for which a user was paged.",
                "description": "The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.\n\nThis API may be called a maximum of 6 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Ack/Resolve payload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AckOrResolveByUserRequest"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The result of each resolve incident action.",
                        "schema": {
                            "$ref": "#/definitions/AckOrResolveResponse"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/alerts/{uuid}": {
            "get": {
                "tags": [
                    "Alerts"
                ],
                "summary": "Retrieve alert details.",
                "description": "Retrieve the details of an alert that was sent VictorOps by you.\n\nThis API may be called a maximum of 6 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "uuid",
                        "in": "path",
                        "description": "The VictorOps uuid of the alert",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Uuid"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The alert, if found.\n",
                        "schema": {
                            "$ref": "#/definitions/GetAlertResponse"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/org/routing-keys": {
            "get": {
                "tags": [
                    "Routing Keys"
                ],
                "summary": "List routing keys with associated teams",
                "description": "Retrieves a list of routing keys and associated teams.\nThis API may be called a maximum of once a minute.",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of routing keys and associated teams",
                        "schema": {
                            "$ref": "#/definitions/ListRoutingKeysResponse"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Path not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/policies": {
            "get": {
                "tags": [
                    "Escalation Policies"
                ],
                "summary": "Get escalation policy info",
                "description": "Retrieves a list of escalation policy information.\nThis API may be called a maximum of once a minute",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of escalation policies",
                        "schema": {
                            "$ref": "#/definitions/EscalationPolicyInfoList"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Path not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-reporting/v1/incidents": {
            "get": {
                "tags": [
                    "Reporting"
                ],
                "summary": "Get/search incident history",
                "description": "\n__NOTE: This call is deprecated. Please use `GET /api-reporting/v2/incidents`.__\n\nRetrieve incident history for your company, searching over date ranges and with filtering options.  This is historical\ndata, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.\n\nThis API may be called a maximum of once a minute.\n\nIncident requests are paginated with a offset and limit query string parameters.\n  The query for incidents is run and offset records are skipped, after which limit records will be returned.\n\nThe default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.\n\nOn return, the total number of records available for that query will be returned in the payload as 'total'.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The offset within the set of matching incidents",
                        "required": false,
                        "type": "number",
                        "default": 0,
                        "x-exportParamName": "Offset"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The maximum number of matching incidents to return (100 max)",
                        "required": false,
                        "type": "number",
                        "default": 20,
                        "maximum": 100,
                        "x-exportParamName": "Limit"
                    },
                    {
                        "name": "entityId",
                        "in": "query",
                        "description": "The entity ID involved  This is the unique identifier for the entity causing the incident.",
                        "required": false,
                        "type": "string",
                        "x-exportParamName": "EntityId"
                    },
                    {
                        "name": "incidentNumber",
                        "in": "query",
                        "description": "The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50\n",
                        "required": false,
                        "type": "string",
                        "x-exportParamName": "IncidentNumber"
                    },
                    {
                        "name": "startedAfter",
                        "in": "query",
                        "description": "Return incidents started after this timestamp Specify the timestamp in ISO8601 format",
                        "required": false,
                        "type": "string",
                        "x-exportParamName": "StartedAfter"
                    },
                    {
                        "name": "startedBefore",
                        "in": "query",
                        "description": "Find incidents started before this timestamp  Specify the timestamp in ISO8601 format",
                        "required": false,
                        "type": "string",
                        "x-exportParamName": "StartedBefore"
                    },
                    {
                        "name": "host",
                        "in": "query",
                        "description": "The host involved in the incident Multiple values can be separated with commas.",
                        "required": false,
                        "type": "string",
                        "x-exportParamName": "Host"
                    },
                    {
                        "name": "service",
                        "in": "query",
                        "description": "The service involved in the incident (if any) Multiple values can be separated with commas.",
                        "required": false,
                        "type": "string",
                        "x-exportParamName": "Service"
                    },
                    {
                        "name": "currentPhase",
                        "in": "query",
                        "description": "The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas.",
                        "required": false,
                        "type": "string",
                        "x-exportParamName": "CurrentPhase"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of incidents matching the request filters",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/IncidentList"
                            }
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Path not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": true
            }
        },
        "/api-reporting/v2/incidents": {
            "get": {
                "tags": [
                    "Reporting"
                ],
                "summary": "Get/search incident history",
                "description": "Retrieve incident history for your company, searching over date ranges and with filtering options.\n\nThis API may be called a maximum of once a minute.\n\nIncident requests are paginated with a offset and limit query string parameters.\n  The query for incidents is run and offset records are skipped, after which limit records will be returned.\n\nThe default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.\n\nUnless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.\n\nOn return, the total number of records available for that query will be returned in the payload as 'total'.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The offset within the set of matching incidents",
                        "required": false,
                        "type": "number",
                        "default": 0,
                        "x-exportParamName": "Offset"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The maximum number of matching incidents to return (100 max)",
                        "required": false,
                        "type": "number",
                        "default": 20,
                        "maximum": 100,
                        "x-exportParamName": "Limit"
                    },
                    {
                        "name": "entityId",
                        "in": "query",
                        "description": "The entity ID involved  This is the unique identifier for the entity causing the incident.",
                        "required": false,
                        "type": "string",
                        "x-exportParamName": "EntityId"
                    },
                    {
                        "name": "incidentNumber",
                        "in": "query",
                        "description": "The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50\n",
                        "required": false,
                        "type": "string",
                        "x-exportParamName": "IncidentNumber"
                    },
                    {
                        "name": "startedAfter",
                        "in": "query",
                        "description": "Return incidents started after this timestamp Specify the timestamp in ISO8601 format",
                        "required": false,
                        "type": "string",
                        "x-exportParamName": "StartedAfter"
                    },
                    {
                        "name": "startedBefore",
                        "in": "query",
                        "description": "Find incidents started before this timestamp  Specify the timestamp in ISO8601 format",
                        "required": false,
                        "type": "string",
                        "x-exportParamName": "StartedBefore"
                    },
                    {
                        "name": "host",
                        "in": "query",
                        "description": "The host involved in the incident Multiple values can be separated with commas.",
                        "required": false,
                        "type": "string",
                        "x-exportParamName": "Host"
                    },
                    {
                        "name": "service",
                        "in": "query",
                        "description": "The service involved in the incident (if any) Multiple values can be separated with commas.",
                        "required": false,
                        "type": "string",
                        "x-exportParamName": "Service"
                    },
                    {
                        "name": "currentPhase",
                        "in": "query",
                        "description": "The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\". Multiple values can be separated with commas. By default, response contains only \"resolved\" incidents",
                        "required": false,
                        "type": "string",
                        "x-exportParamName": "CurrentPhase"
                    },
                    {
                        "name": "routingKey",
                        "in": "query",
                        "description": "The original routing of the incident",
                        "required": false,
                        "type": "string",
                        "x-exportParamName": "RoutingKey"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of incidents matching the request filters",
                        "schema": {
                            "$ref": "#/definitions/ActiveIncidentList"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Path not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/team": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "summary": "List teams",
                "description": "Get a list of teams for your organization.\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of teams for your organization",
                        "schema": {
                            "$ref": "#/definitions/ListTeamResponse"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Team not found"
                    },
                    "422": {
                        "description": "You have reached your team limit.\n"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Teams"
                ],
                "summary": "Add a team",
                "description": "Add a team to your organization.\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The team information",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddTeamPayload"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Some details about the team that was added",
                        "schema": {
                            "$ref": "#/definitions/AddTeamResponse"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Team not found"
                    },
                    "422": {
                        "description": "Team name or email is unavailable, or you have reached your team limit.\n"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/team/{team}": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "summary": "Retrieve information for a team",
                "description": "Get the information for the specified team.\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "team",
                        "in": "path",
                        "description": "The VictorOps team to fetch",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Team"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Some details about the team that was added",
                        "schema": {
                            "$ref": "#/definitions/AddTeamResponse"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Team not found"
                    },
                    "422": {
                        "description": "Team name or email is unavailable, or you have reached your team limit.\n"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Teams"
                ],
                "summary": "Update a team",
                "description": "Update the designated team\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "team",
                        "in": "path",
                        "description": "The VictorOps team to be updated",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Team"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The team information",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddTeamPayload"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Some details about the team that was added",
                        "schema": {
                            "$ref": "#/definitions/AddTeamResponse"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Team not found"
                    },
                    "422": {
                        "description": "Team name or email is unavailable, or you have reached your team limit.\n"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Teams"
                ],
                "summary": "Remove a team",
                "description": "Remove a team from your organization.\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "team",
                        "in": "path",
                        "description": "The VictorOps team to be deleted",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Team"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team was deleted"
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Team not found"
                    },
                    "422": {
                        "description": "There was a problem with the delete such as the replacement team was not found.\n"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/team/{team}/policies": {
            "get": {
                "tags": [
                    "Escalation Policies",
                    "Teams"
                ],
                "summary": "Retrieve a list of escalation policies for a team",
                "description": "Get the escalation policies for the specified team.\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "team",
                        "in": "path",
                        "description": "The VictorOps team to fetch",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Team"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The escalation policy list. This does not include details about the actual notification steps of the policy.",
                        "schema": {
                            "$ref": "#/definitions/EscalationPolicyList"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Team not found"
                    },
                    "422": {
                        "description": "Team name or email is unavailable, or you have reached your team limit.\n"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/team/{team}/members": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "summary": "Retrieve a list of members for a team",
                "description": "Get the members for the specified team.\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "team",
                        "in": "path",
                        "description": "The VictorOps team to fetch",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Team"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Some details about the team that was added",
                        "schema": {
                            "$ref": "#/definitions/ListTeamMembersResponse"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Team not found"
                    },
                    "422": {
                        "description": "Team name or email is unavailable, or you have reached your team limit.\n"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Teams"
                ],
                "summary": "Add a team member",
                "description": "Add a team member to your team.\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "team",
                        "in": "path",
                        "description": "The VictorOps team to fetch",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Team"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddTeamMemberPayload"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Some details about the team that was added",
                        "schema": {
                            "$ref": "#/definitions/ListTeamMembersResponse"
                        }
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Team not found"
                    },
                    "422": {
                        "description": "Team name or email is unavailable, or you have reached your team limit.\n"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api-public/v1/team/{team}/members/{user}": {
            "delete": {
                "tags": [
                    "Teams"
                ],
                "summary": "Remove a team member",
                "description": "Remove a team from your organization.\n\nThis API may be called a maximum of 15 times per minute.\n",
                "parameters": [
                    {
                        "name": "X-VO-Api-Id",
                        "in": "header",
                        "description": "Your API ID",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiId"
                    },
                    {
                        "name": "X-VO-Api-Key",
                        "in": "header",
                        "description": "Your API Key",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "XVOApiKey"
                    },
                    {
                        "name": "team",
                        "in": "path",
                        "description": "The VictorOps team to be deleted",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "Team"
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The team member username",
                        "required": true,
                        "type": "string",
                        "x-exportParamName": "User"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The user information",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RemoveTeamMemberPayload"
                        },
                        "x-exportParamName": "Body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team was deleted"
                    },
                    "400": {
                        "description": "Problem with the request arguments.  The response payload may include an error message."
                    },
                    "401": {
                        "description": "Authentication parameters missing"
                    },
                    "403": {
                        "description": "Authentication failed or rate-limit reached"
                    },
                    "404": {
                        "description": "Team not found"
                    },
                    "422": {
                        "description": "There was a problem with the delete such as the replacement team member was not found.\n"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "TeamScheduleOverlayResource": {
            "type": "object",
            "properties": {
                "orig": {
                    "type": "string",
                    "description": "The user scheduled on call (if any)"
                },
                "over": {
                    "type": "string",
                    "description": "The user overriding the scheduled on call user (if any)"
                },
                "start": {
                    "type": "number",
                    "description": "The time the override is scheduled to start"
                },
                "end": {
                    "type": "number",
                    "description": "The time the override is scheduled to end"
                }
            },
            "example": {
                "over": "over",
                "orig": "orig",
                "start": 5.962133916683182,
                "end": 5.637376656633329
            }
        },
        "TeamScheduleRollResource": {
            "type": "object",
            "required": [
                "change",
                "isRoll",
                "until"
            ],
            "properties": {
                "change": {
                    "type": "number",
                    "description": "The time the period is scheduled to start"
                },
                "until": {
                    "type": "number",
                    "description": "The time the period is scheduled to end"
                },
                "oncall": {
                    "type": "string",
                    "description": "The user scheduled on call (if any)"
                },
                "isRoll": {
                    "type": "boolean"
                }
            },
            "example": {
                "change": 6.027456183070403,
                "until": 1.4658129805029452,
                "oncall": "oncall",
                "isRoll": true
            }
        },
        "TeamScheduleResource": {
            "type": "object",
            "required": [
                "policyType",
                "rolls"
            ],
            "properties": {
                "oncall": {
                    "type": "string",
                    "description": "The user scheduled on call (if any)"
                },
                "overrideoncall": {
                    "type": "string",
                    "description": "The user overriding the scheduled on call user (if any)"
                },
                "policyType": {
                    "type": "string"
                },
                "rotationName": {
                    "type": "string"
                },
                "shiftName": {
                    "type": "string"
                },
                "shiftRoll": {
                    "type": "number"
                },
                "rolls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TeamScheduleRollResource"
                    }
                }
            },
            "example": {
                "shiftName": "shiftName",
                "shiftRoll": 0.8008281904610115,
                "policyType": "policyType",
                "rotationName": "rotationName",
                "oncall": "oncall",
                "rolls": [
                    {
                        "change": 6.027456183070403,
                        "until": 1.4658129805029452,
                        "oncall": "oncall",
                        "isRoll": true
                    },
                    {
                        "change": 6.027456183070403,
                        "until": 1.4658129805029452,
                        "oncall": "oncall",
                        "isRoll": true
                    }
                ],
                "overrideoncall": "overrideoncall"
            }
        },
        "OnCallAndOverrides": {
            "type": "object",
            "properties": {
                "team": {
                    "type": "string"
                },
                "schedule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TeamScheduleResource"
                    }
                },
                "overrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TeamScheduleOverlayResource"
                    }
                }
            },
            "example": {
                "schedule": [
                    {
                        "shiftName": "shiftName",
                        "shiftRoll": 0.8008281904610115,
                        "policyType": "policyType",
                        "rotationName": "rotationName",
                        "oncall": "oncall",
                        "rolls": [
                            {
                                "change": 6.027456183070403,
                                "until": 1.4658129805029452,
                                "oncall": "oncall",
                                "isRoll": true
                            },
                            {
                                "change": 6.027456183070403,
                                "until": 1.4658129805029452,
                                "oncall": "oncall",
                                "isRoll": true
                            }
                        ],
                        "overrideoncall": "overrideoncall"
                    },
                    {
                        "shiftName": "shiftName",
                        "shiftRoll": 0.8008281904610115,
                        "policyType": "policyType",
                        "rotationName": "rotationName",
                        "oncall": "oncall",
                        "rolls": [
                            {
                                "change": 6.027456183070403,
                                "until": 1.4658129805029452,
                                "oncall": "oncall",
                                "isRoll": true
                            },
                            {
                                "change": 6.027456183070403,
                                "until": 1.4658129805029452,
                                "oncall": "oncall",
                                "isRoll": true
                            }
                        ],
                        "overrideoncall": "overrideoncall"
                    }
                ],
                "team": "team",
                "overrides": [
                    {
                        "over": "over",
                        "orig": "orig",
                        "start": 5.962133916683182,
                        "end": 5.637376656633329
                    },
                    {
                        "over": "over",
                        "orig": "orig",
                        "start": 5.962133916683182,
                        "end": 5.637376656633329
                    }
                ]
            }
        },
        "OnCallEscalationPolicyResource": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "example": {
                "name": "name",
                "slug": "slug"
            }
        },
        "OnCallUsersResource": {
            "type": "object",
            "properties": {
                "onCallUser": {
                    "$ref": "#/definitions/OnCallUsersResource_onCallUser"
                }
            },
            "example": {
                "onCallUser": {
                    "username": "username"
                }
            }
        },
        "OnCallTeamResource": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "example": {
                "name": "name",
                "slug": "slug"
            }
        },
        "OnCallNowResource": {
            "type": "object",
            "properties": {
                "escalationPolicy": {
                    "$ref": "#/definitions/OnCallEscalationPolicyResource"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OnCallUsersResource"
                    }
                }
            },
            "example": {
                "escalationPolicy": {
                    "name": "name",
                    "slug": "slug"
                },
                "users": [
                    {
                        "onCallUser": {
                            "username": "username"
                        }
                    },
                    {
                        "onCallUser": {
                            "username": "username"
                        }
                    }
                ]
            }
        },
        "OnCallTeamsResource": {
            "type": "object",
            "properties": {
                "team": {
                    "$ref": "#/definitions/OnCallTeamResource"
                },
                "onCallNow": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OnCallNowResource"
                    }
                }
            },
            "example": {
                "onCallNow": [
                    {
                        "escalationPolicy": {
                            "name": "name",
                            "slug": "slug"
                        },
                        "users": [
                            {
                                "onCallUser": {
                                    "username": "username"
                                }
                            },
                            {
                                "onCallUser": {
                                    "username": "username"
                                }
                            }
                        ]
                    },
                    {
                        "escalationPolicy": {
                            "name": "name",
                            "slug": "slug"
                        },
                        "users": [
                            {
                                "onCallUser": {
                                    "username": "username"
                                }
                            },
                            {
                                "onCallUser": {
                                    "username": "username"
                                }
                            }
                        ]
                    }
                ],
                "team": {
                    "name": "name",
                    "slug": "slug"
                }
            }
        },
        "TakeRequest": {
            "type": "object",
            "required": [
                "fromUser",
                "toUser"
            ],
            "properties": {
                "fromUser": {
                    "type": "string"
                },
                "toUser": {
                    "type": "string"
                }
            },
            "example": {
                "toUser": "toUser",
                "fromUser": "fromUser"
            }
        },
        "TakeResult": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "string"
                }
            },
            "example": {
                "result": "result"
            }
        },
        "AckOrResolveRequest": {
            "type": "object",
            "required": [
                "incidentNames",
                "userName"
            ],
            "properties": {
                "userName": {
                    "type": "string"
                },
                "incidentNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                }
            },
            "example": {
                "incidentNames": [
                    "incidentNames",
                    "incidentNames"
                ],
                "userName": "userName",
                "message": "message"
            }
        },
        "CreateIncidentRequest": {
            "type": "object",
            "required": [
                "details",
                "summary",
                "targets",
                "userName"
            ],
            "properties": {
                "summary": {
                    "type": "string"
                },
                "details": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IncidentTarget"
                    }
                }
            },
            "example": {
                "summary": "summary",
                "details": "details",
                "userName": "userName",
                "targets": [
                    {
                        "type": "User",
                        "slug": "slug"
                    },
                    {
                        "type": "User",
                        "slug": "slug"
                    }
                ]
            }
        },
        "AckOrResolveByUserRequest": {
            "type": "object",
            "required": [
                "userName"
            ],
            "properties": {
                "userName": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            },
            "example": {
                "userName": "userName",
                "message": "message"
            }
        },
        "AckOrResolveResponse": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AckOrResolveResult"
                    }
                }
            },
            "description": "The results of ack/resolve for each incident",
            "example": {
                "results": [
                    {
                        "entityId": "entityId",
                        "cmdAccepted": true,
                        "message": "message",
                        "incidentNumber": "incidentNumber"
                    },
                    {
                        "entityId": "entityId",
                        "cmdAccepted": true,
                        "message": "message",
                        "incidentNumber": "incidentNumber"
                    }
                ]
            }
        },
        "AckOrResolveResult": {
            "type": "object",
            "properties": {
                "incidentNumber": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "cmdAccepted": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                }
            },
            "description": "The results of ack/resolve for a individual incident",
            "example": {
                "entityId": "entityId",
                "cmdAccepted": true,
                "message": "message",
                "incidentNumber": "incidentNumber"
            }
        },
        "ActiveIncidentList": {
            "type": "object",
            "properties": {
                "incidents": {
                    "type": "array",
                    "description": "The incident data",
                    "items": {
                        "$ref": "#/definitions/ActiveIncidentInfo"
                    }
                }
            },
            "description": "The list of incidents in various states",
            "example": {
                "incidents": [
                    {
                        "entityId": "entityId",
                        "pagedPolicies": [
                            {
                                "team": {
                                    "name": "name",
                                    "slug": "slug"
                                },
                                "policy": {
                                    "name": "name",
                                    "slug": "slug"
                                }
                            },
                            {
                                "team": {
                                    "name": "name",
                                    "slug": "slug"
                                },
                                "policy": {
                                    "name": "name",
                                    "slug": "slug"
                                }
                            }
                        ],
                        "transitions": [
                            {
                                "at": "at",
                                "manually": true,
                                "by": "by",
                                "name": "name",
                                "alertId": "alertId",
                                "alertUrl": "alertUrl",
                                "message": "message"
                            },
                            {
                                "at": "at",
                                "manually": true,
                                "by": "by",
                                "name": "name",
                                "alertId": "alertId",
                                "alertUrl": "alertUrl",
                                "message": "message"
                            }
                        ],
                        "pagedTeams": [
                            "pagedTeams",
                            "pagedTeams"
                        ],
                        "lastAlertTime": "lastAlertTime",
                        "alertCount": 0.8008281904610115,
                        "pagedUsers": [
                            "pagedUsers",
                            "pagedUsers"
                        ],
                        "currentPhase": "currentPhase",
                        "service": "service",
                        "host": "host",
                        "startTime": "startTime",
                        "lastAlertId": "lastAlertId",
                        "incidentNumber": "incidentNumber"
                    },
                    {
                        "entityId": "entityId",
                        "pagedPolicies": [
                            {
                                "team": {
                                    "name": "name",
                                    "slug": "slug"
                                },
                                "policy": {
                                    "name": "name",
                                    "slug": "slug"
                                }
                            },
                            {
                                "team": {
                                    "name": "name",
                                    "slug": "slug"
                                },
                                "policy": {
                                    "name": "name",
                                    "slug": "slug"
                                }
                            }
                        ],
                        "transitions": [
                            {
                                "at": "at",
                                "manually": true,
                                "by": "by",
                                "name": "name",
                                "alertId": "alertId",
                                "alertUrl": "alertUrl",
                                "message": "message"
                            },
                            {
                                "at": "at",
                                "manually": true,
                                "by": "by",
                                "name": "name",
                                "alertId": "alertId",
                                "alertUrl": "alertUrl",
                                "message": "message"
                            }
                        ],
                        "pagedTeams": [
                            "pagedTeams",
                            "pagedTeams"
                        ],
                        "lastAlertTime": "lastAlertTime",
                        "alertCount": 0.8008281904610115,
                        "pagedUsers": [
                            "pagedUsers",
                            "pagedUsers"
                        ],
                        "currentPhase": "currentPhase",
                        "service": "service",
                        "host": "host",
                        "startTime": "startTime",
                        "lastAlertId": "lastAlertId",
                        "incidentNumber": "incidentNumber"
                    }
                ]
            }
        },
        "ActiveIncidentInfo": {
            "type": "object",
            "properties": {
                "incidentNumber": {
                    "type": "string",
                    "description": "The VictorOps incident number"
                },
                "startTime": {
                    "type": "string",
                    "description": "The time the incident started"
                },
                "currentPhase": {
                    "type": "string",
                    "description": "The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\"."
                },
                "alertCount": {
                    "type": "number",
                    "description": "The number of alerts received for this incident"
                },
                "lastAlertTime": {
                    "type": "string",
                    "description": "The time of the last alert received for the incident"
                },
                "lastAlertId": {
                    "type": "string",
                    "description": "The unique id of the last alert for the incident"
                },
                "entityId": {
                    "type": "string",
                    "description": "The unique identification of the entity being monitored that caused the incident"
                },
                "host": {
                    "type": "string",
                    "description": "The host on which the incident occurred"
                },
                "service": {
                    "type": "string",
                    "description": "The service name causing the incident (if any)"
                },
                "pagedUsers": {
                    "type": "array",
                    "description": "The users that were paged for the incident.",
                    "items": {
                        "type": "string"
                    }
                },
                "pagedTeams": {
                    "type": "array",
                    "description": "The teams that were paged for the incident",
                    "items": {
                        "type": "string"
                    }
                },
                "pagedPolicies": {
                    "type": "array",
                    "description": "The escalation policies that were triggered for the incident",
                    "items": {
                        "$ref": "#/definitions/EscalationPolicyInfo"
                    }
                },
                "transitions": {
                    "type": "array",
                    "description": "Transitions of the incident state over time",
                    "items": {
                        "$ref": "#/definitions/IncidentTransition"
                    }
                }
            },
            "description": "Incidents contain the following fields (all should be considered optional)",
            "example": {
                "entityId": "entityId",
                "pagedPolicies": [
                    {
                        "team": {
                            "name": "name",
                            "slug": "slug"
                        },
                        "policy": {
                            "name": "name",
                            "slug": "slug"
                        }
                    },
                    {
                        "team": {
                            "name": "name",
                            "slug": "slug"
                        },
                        "policy": {
                            "name": "name",
                            "slug": "slug"
                        }
                    }
                ],
                "transitions": [
                    {
                        "at": "at",
                        "manually": true,
                        "by": "by",
                        "name": "name",
                        "alertId": "alertId",
                        "alertUrl": "alertUrl",
                        "message": "message"
                    },
                    {
                        "at": "at",
                        "manually": true,
                        "by": "by",
                        "name": "name",
                        "alertId": "alertId",
                        "alertUrl": "alertUrl",
                        "message": "message"
                    }
                ],
                "pagedTeams": [
                    "pagedTeams",
                    "pagedTeams"
                ],
                "lastAlertTime": "lastAlertTime",
                "alertCount": 0.8008281904610115,
                "pagedUsers": [
                    "pagedUsers",
                    "pagedUsers"
                ],
                "currentPhase": "currentPhase",
                "service": "service",
                "host": "host",
                "startTime": "startTime",
                "lastAlertId": "lastAlertId",
                "incidentNumber": "incidentNumber"
            }
        },
        "IncidentTransition": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The transition name"
                },
                "at": {
                    "type": "string",
                    "description": "The time of the transition"
                },
                "by": {
                    "type": "string",
                    "description": "The user that caused the transition (if any)"
                },
                "message": {
                    "type": "string",
                    "description": "The message entered by that user (if any)"
                },
                "manually": {
                    "type": "boolean",
                    "description": "If the incident transition was caused by a person"
                },
                "alertId": {
                    "type": "string",
                    "description": "The unique alert ID that caused the transition"
                },
                "alertUrl": {
                    "type": "string",
                    "description": "A URL to retrieve the details of the alert that caused the transition"
                }
            },
            "description": "A transition of incident state",
            "example": {
                "at": "at",
                "manually": true,
                "by": "by",
                "name": "name",
                "alertId": "alertId",
                "alertUrl": "alertUrl",
                "message": "message"
            }
        },
        "AckUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first": {
                    "type": "string"
                },
                "last": {
                    "type": "string"
                }
            },
            "description": "A JSON object with first/last name and email of the user that acknowledged the incident.",
            "example": {
                "last": "last",
                "email": "email",
                "first": "first"
            }
        },
        "IncidentList": {
            "type": "object",
            "properties": {
                "offset": {
                    "type": "number",
                    "description": "The offset passed in the request"
                },
                "limit": {
                    "type": "number",
                    "description": "The limit value passed in the request"
                },
                "total": {
                    "type": "number",
                    "description": "The total number of incidents available for this search"
                },
                "incidents": {
                    "type": "array",
                    "description": "An array of incident objects matching the search",
                    "items": {
                        "$ref": "#/definitions/IncidentInfo"
                    }
                }
            },
            "description": "The results of an incident history request",
            "example": {
                "total": 1.4658129805029452,
                "offset": 0.8008281904610115,
                "limit": 6.027456183070403,
                "incidents": [
                    {
                        "ackTime": "ackTime",
                        "ackUserId": "ackUserId",
                        "teams": "teams",
                        "entityType": "entityType",
                        "entityId": "entityId",
                        "ackUser": {
                            "last": "last",
                            "email": "email",
                            "first": "first"
                        },
                        "lastAlertTime": "lastAlertTime",
                        "entityDispName": "entityDispName",
                        "alertCount": 5.962133916683182,
                        "currentPhase": "currentPhase",
                        "service": "service",
                        "host": "host",
                        "startTime": "startTime",
                        "lastAlertID": "lastAlertID",
                        "endTime": "endTime",
                        "incidentNumber": "incidentNumber"
                    },
                    {
                        "ackTime": "ackTime",
                        "ackUserId": "ackUserId",
                        "teams": "teams",
                        "entityType": "entityType",
                        "entityId": "entityId",
                        "ackUser": {
                            "last": "last",
                            "email": "email",
                            "first": "first"
                        },
                        "lastAlertTime": "lastAlertTime",
                        "entityDispName": "entityDispName",
                        "alertCount": 5.962133916683182,
                        "currentPhase": "currentPhase",
                        "service": "service",
                        "host": "host",
                        "startTime": "startTime",
                        "lastAlertID": "lastAlertID",
                        "endTime": "endTime",
                        "incidentNumber": "incidentNumber"
                    }
                ]
            }
        },
        "IncidentInfo": {
            "type": "object",
            "properties": {
                "incidentNumber": {
                    "type": "string",
                    "description": "The VictorOps incident number"
                },
                "startTime": {
                    "type": "string",
                    "description": "The time the incident started"
                },
                "currentPhase": {
                    "type": "string",
                    "description": "The current phase of the incident \"resolved\", \"triggered\" or \"acknowledged\"."
                },
                "alertCount": {
                    "type": "number",
                    "description": "The number of alerts received for this incident"
                },
                "lastAlertTime": {
                    "type": "string",
                    "description": "The time of the last alert received for the incident"
                },
                "lastAlertID": {
                    "type": "string",
                    "description": "The unique id of the last alert for the incident"
                },
                "ackUserId": {
                    "type": "string",
                    "description": "The VictorOps user id of the user that acknowledged the incident"
                },
                "ackTime": {
                    "type": "string",
                    "description": "The time of the last acknowledgment of the incident"
                },
                "entityId": {
                    "type": "string",
                    "description": "The unique identification of the entity being monitored that caused the incident"
                },
                "host": {
                    "type": "string",
                    "description": "The host on which the incident occurred"
                },
                "service": {
                    "type": "string",
                    "description": "The service name causing the incident (if any)"
                },
                "endTime": {
                    "type": "string",
                    "description": "The time the incident ended"
                },
                "ackUser": {
                    "$ref": "#/definitions/AckUser"
                },
                "entityType": {
                    "type": "string",
                    "description": "The type of entity causing the incident (host/service)"
                },
                "entityDispName": {
                    "type": "string",
                    "description": "The display name of the entity causing the incident"
                },
                "teams": {
                    "type": "string",
                    "description": "The teams that were paged for the incident (comma separated)."
                }
            },
            "description": "Incidents contain the following fields (all should be considered optional)",
            "example": {
                "ackTime": "ackTime",
                "ackUserId": "ackUserId",
                "teams": "teams",
                "entityType": "entityType",
                "entityId": "entityId",
                "ackUser": {
                    "last": "last",
                    "email": "email",
                    "first": "first"
                },
                "lastAlertTime": "lastAlertTime",
                "entityDispName": "entityDispName",
                "alertCount": 5.962133916683182,
                "currentPhase": "currentPhase",
                "service": "service",
                "host": "host",
                "startTime": "startTime",
                "lastAlertID": "lastAlertID",
                "endTime": "endTime",
                "incidentNumber": "incidentNumber"
            }
        },
        "GetAlertResponse": {
            "type": "object",
            "properties": {
                "messageType": {
                    "type": "string",
                    "description": "The type of alert; INFO, WARNING, ACKNOWLEDGEMENT, CRITICAL, RECOVERY\n"
                },
                "entityId": {
                    "type": "string",
                    "description": "Identifies the entity (host, service, etc.) this alert was about.\n"
                },
                "timestamp": {
                    "type": "number",
                    "description": "Timestamp of the alert in seconds since epoch."
                },
                "stateStartTime": {
                    "type": "number",
                    "description": "The time this entity entered its current state (seconds since epoch)."
                },
                "stateMessage": {
                    "type": "string",
                    "description": "Any additional status information from the alert item."
                },
                "monitoringTool": {
                    "type": "string",
                    "description": "The name of the monitoring system software (eg. nagios, icinga, sensu, etc.)"
                },
                "entityDisplayName": {
                    "type": "string",
                    "description": "Used within VictorOps to display a human-readable name for the entity."
                },
                "ackMsg": {
                    "type": "string",
                    "description": "A user entered comment for the acknowledgment."
                },
                "ackAuthor": {
                    "type": "string",
                    "description": "The user that acknowledged the incident."
                },
                "raw": {
                    "type": "string",
                    "description": "The full, raw alert details JSON string (i.e. parse the string into a JSON object)\n"
                }
            },
            "description": "Alert details. All fields should be considered optional.",
            "example": {
                "monitoringTool": "monitoringTool",
                "ackMsg": "ackMsg",
                "messageType": "messageType",
                "stateMessage": "stateMessage",
                "raw": "raw",
                "entityId": "entityId",
                "entityDisplayName": "entityDisplayName",
                "ackAuthor": "ackAuthor",
                "stateStartTime": 6.027456183070403,
                "timestamp": 0.8008281904610115
            }
        },
        "ListUserResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/V1User"
                    }
                },
                "_selfUrl": {
                    "type": "string"
                }
            },
            "description": "Some info about the user",
            "example": {
                "_selfUrl": "_selfUrl",
                "users": [
                    {
                        "firstName": "firstName",
                        "lastName": "lastName",
                        "createdAt": "createdAt",
                        "passwordLastUpdated": "passwordLastUpdated",
                        "_selfUrl": "_selfUrl",
                        "verified": true,
                        "email": "email",
                        "username": "username"
                    },
                    {
                        "firstName": "firstName",
                        "lastName": "lastName",
                        "createdAt": "createdAt",
                        "passwordLastUpdated": "passwordLastUpdated",
                        "_selfUrl": "_selfUrl",
                        "verified": true,
                        "email": "email",
                        "username": "username"
                    }
                ]
            }
        },
        "AddUserResponse": {
            "$ref": "#/definitions/V1User"
        },
        "OnCallLog": {
            "type": "object",
            "properties": {
                "teamSlug": {
                    "type": "string"
                },
                "start": {
                    "type": "string",
                    "format": "date-time"
                },
                "end": {
                    "type": "string",
                    "format": "date-time"
                },
                "userLogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserLog"
                    }
                }
            },
            "example": {
                "userLogs": [
                    {
                        "total": {
                            "hours": 0.8008281904610115,
                            "minutes": 6.027456183070403
                        },
                        "log": [
                            {
                                "duration": {
                                    "hours": 0.8008281904610115,
                                    "minutes": 6.027456183070403
                                },
                                "true": "true",
                                "false": "false",
                                "escalationPolicy": {
                                    "name": "name",
                                    "slug": "slug"
                                }
                            },
                            {
                                "duration": {
                                    "hours": 0.8008281904610115,
                                    "minutes": 6.027456183070403
                                },
                                "true": "true",
                                "false": "false",
                                "escalationPolicy": {
                                    "name": "name",
                                    "slug": "slug"
                                }
                            }
                        ],
                        "adjustedTotal": {
                            "hours": 0.8008281904610115,
                            "minutes": 6.027456183070403
                        },
                        "userId": "userId"
                    },
                    {
                        "total": {
                            "hours": 0.8008281904610115,
                            "minutes": 6.027456183070403
                        },
                        "log": [
                            {
                                "duration": {
                                    "hours": 0.8008281904610115,
                                    "minutes": 6.027456183070403
                                },
                                "true": "true",
                                "false": "false",
                                "escalationPolicy": {
                                    "name": "name",
                                    "slug": "slug"
                                }
                            },
                            {
                                "duration": {
                                    "hours": 0.8008281904610115,
                                    "minutes": 6.027456183070403
                                },
                                "true": "true",
                                "false": "false",
                                "escalationPolicy": {
                                    "name": "name",
                                    "slug": "slug"
                                }
                            }
                        ],
                        "adjustedTotal": {
                            "hours": 0.8008281904610115,
                            "minutes": 6.027456183070403
                        },
                        "userId": "userId"
                    }
                ],
                "teamSlug": "teamSlug",
                "start": "2000-01-23T04:56:07.000+00:00",
                "end": "2000-01-23T04:56:07.000+00:00"
            }
        },
        "UserLog": {
            "type": "object",
            "properties": {
                "userId": {
                    "type": "string"
                },
                "total": {
                    "$ref": "#/definitions/UserLog_total"
                },
                "adjustedTotal": {
                    "$ref": "#/definitions/UserLog_total"
                },
                "log": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OnCallInterval"
                    }
                }
            },
            "example": {
                "total": {
                    "hours": 0.8008281904610115,
                    "minutes": 6.027456183070403
                },
                "log": [
                    {
                        "duration": {
                            "hours": 0.8008281904610115,
                            "minutes": 6.027456183070403
                        },
                        "true": "true",
                        "false": "false",
                        "escalationPolicy": {
                            "name": "name",
                            "slug": "slug"
                        }
                    },
                    {
                        "duration": {
                            "hours": 0.8008281904610115,
                            "minutes": 6.027456183070403
                        },
                        "true": "true",
                        "false": "false",
                        "escalationPolicy": {
                            "name": "name",
                            "slug": "slug"
                        }
                    }
                ],
                "adjustedTotal": {
                    "hours": 0.8008281904610115,
                    "minutes": 6.027456183070403
                },
                "userId": "userId"
            }
        },
        "OnCallInterval": {
            "type": "object",
            "properties": {
                "true": {
                    "type": "string"
                },
                "false": {
                    "type": "string"
                },
                "duration": {
                    "$ref": "#/definitions/UserLog_total"
                },
                "escalationPolicy": {
                    "$ref": "#/definitions/EscalationPolicy"
                }
            },
            "example": {
                "duration": {
                    "hours": 0.8008281904610115,
                    "minutes": 6.027456183070403
                },
                "true": "true",
                "false": "false",
                "escalationPolicy": {
                    "name": "name",
                    "slug": "slug"
                }
            }
        },
        "V1User": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "passwordLastUpdated": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean",
                    "description": "Whether or not this user has set their password (will always be false)"
                },
                "_selfUrl": {
                    "type": "string"
                }
            },
            "description": "Some info about the user",
            "example": {
                "firstName": "firstName",
                "lastName": "lastName",
                "createdAt": "createdAt",
                "passwordLastUpdated": "passwordLastUpdated",
                "_selfUrl": "_selfUrl",
                "verified": true,
                "email": "email",
                "username": "username"
            }
        },
        "RelLink": {
            "type": "object",
            "properties": {
                "rel": {
                    "type": "string"
                },
                "href": {
                    "type": "string"
                }
            }
        },
        "IncidentTarget": {
            "type": "object",
            "required": [
                "slug",
                "type"
            ],
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Type of target",
                    "enum": [
                        "User",
                        "EscalationPolicy"
                    ]
                },
                "slug": {
                    "type": "string",
                    "description": "User name or escalation policy slug"
                }
            },
            "example": {
                "type": "User",
                "slug": "slug"
            }
        },
        "CreatedIncident": {
            "type": "object",
            "properties": {
                "incidentNumber": {
                    "type": "string",
                    "description": "The VictorOps incident number"
                },
                "error": {
                    "type": "string",
                    "description": "An error message"
                }
            },
            "example": {
                "error": "error",
                "incidentNumber": "incidentNumber"
            }
        },
        "ContactDevice": {
            "type": "object",
            "properties": {
                "deviceType": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "extId": {
                    "type": "string"
                },
                "_selfUrl": {
                    "type": "string"
                }
            },
            "example": {
                "deviceType": "deviceType",
                "_selfUrl": "_selfUrl",
                "label": "label",
                "extId": "extId"
            }
        },
        "ContactDeviceAdd": {
            "type": "object",
            "properties": {
                "device_label": {
                    "type": "string"
                },
                "escalation_notification_sound": {
                    "type": "string"
                },
                "chat_escalation_sound": {
                    "type": "string"
                },
                "resolved_notification_sound": {
                    "type": "string"
                }
            },
            "description": "The contact device",
            "example": {
                "escalation_notification_sound": "escalation_notification_sound",
                "resolved_notification_sound": "resolved_notification_sound",
                "device_label": "device_label",
                "chat_escalation_sound": "chat_escalation_sound"
            }
        },
        "UserContact": {
            "type": "object",
            "properties": {
                "deviceType": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "extId": {
                    "type": "string"
                },
                "_selfUrl": {
                    "type": "string"
                }
            },
            "example": {
                "deviceType": "deviceType",
                "_selfUrl": "_selfUrl",
                "label": "label",
                "extId": "extId"
            }
        },
        "TeamDetail": {
            "type": "object",
            "properties": {
                "_selfUrl": {
                    "type": "string"
                },
                "_membersUrl": {
                    "type": "string"
                },
                "_policiesUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "memberCount": {
                    "type": "number"
                },
                "version": {
                    "type": "number"
                },
                "isDefaultTeam": {
                    "type": "boolean"
                }
            },
            "description": "Some info about the team"
        },
        "ListTeamResponse": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/TeamDetail"
            }
        },
        "AddTeamResponse": {
            "$ref": "#/definitions/TeamDetail"
        },
        "ListTeamMembersResponse": {
            "type": "object",
            "properties": {
                "_selfUrl": {
                    "type": "string"
                },
                "_teamUrl": {
                    "type": "string"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TeamMember"
                    }
                }
            },
            "description": "A list of members for the team",
            "example": {
                "_selfUrl": "_selfUrl",
                "_teamUrl": "_teamUrl",
                "members": [
                    {
                        "firstName": "firstName",
                        "lastName": "lastName",
                        "verified": "verified",
                        "version": 0.8008281904610115,
                        "username": "username"
                    },
                    {
                        "firstName": "firstName",
                        "lastName": "lastName",
                        "verified": "verified",
                        "version": 0.8008281904610115,
                        "username": "username"
                    }
                ]
            }
        },
        "TeamMember": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "version": {
                    "type": "number"
                },
                "verified": {
                    "type": "string",
                    "description": "Whether or not this user has set their password (will always be false)"
                }
            },
            "description": "Some info about the user",
            "example": {
                "firstName": "firstName",
                "lastName": "lastName",
                "verified": "verified",
                "version": 0.8008281904610115,
                "username": "username"
            }
        },
        "AddUserPayload": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName",
                "username"
            ],
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "admin": {
                    "type": "boolean"
                },
                "expirationHours": {
                    "type": "number",
                    "description": "The validity duration for the invitatation/set password link sent to the added user."
                }
            },
            "description": "The user information",
            "example": {
                "firstName": "firstName",
                "lastName": "lastName",
                "expirationHours": 0.8008281904610115,
                "admin": true,
                "email": "email",
                "username": "username"
            }
        },
        "DeleteUserPayload": {
            "type": "object",
            "required": [
                "replacement"
            ],
            "properties": {
                "replacement": {
                    "type": "string",
                    "description": "The user to take the place of the deleted user in escalations"
                }
            },
            "description": "The information about what to do with the deleted user",
            "example": {
                "replacement": "replacement"
            }
        },
        "AddTeamMemberPayload": {
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "username": {
                    "type": "string"
                }
            },
            "description": "The user information",
            "example": {
                "username": "username"
            }
        },
        "ContactEmailAdd": {
            "type": "object",
            "required": [
                "email",
                "label"
            ],
            "properties": {
                "label": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "rank": {
                    "type": "integer"
                }
            },
            "description": "The contact email",
            "example": {
                "rank": 0,
                "label": "label",
                "email": "email"
            }
        },
        "ContactPhoneAdd": {
            "type": "object",
            "required": [
                "label",
                "phone"
            ],
            "properties": {
                "label": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "rank": {
                    "type": "integer"
                }
            },
            "description": "The contact phone",
            "example": {
                "phone": "phone",
                "rank": 0,
                "label": "label"
            }
        },
        "AddTeamPayload": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            },
            "description": "The team information",
            "example": {
                "name": "name"
            }
        },
        "RemoveTeamMemberPayload": {
            "type": "object",
            "required": [
                "replacement"
            ],
            "properties": {
                "replacement": {
                    "type": "string"
                }
            },
            "description": "The user information",
            "example": {
                "replacement": "replacement"
            }
        },
        "AlertRequest": {
            "type": "object",
            "required": [
                "alertId"
            ],
            "properties": {
                "alertId": {
                    "type": "string"
                }
            }
        },
        "CreateBatchAlertRequestPayload": {
            "type": "object",
            "properties": {
                "alertIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlertId"
                    }
                }
            },
            "description": "A collection of IDs (uuid) for the alerts to be returned"
        },
        "AlertId": {
            "type": "string"
        },
        "AlertBatchResponse": {
            "type": "object",
            "properties": {
                "requestId": {
                    "type": "string"
                },
                "requestSize": {
                    "type": "integer"
                },
                "responseSize": {
                    "type": "integer"
                },
                "alerts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetAlertResponse"
                    }
                }
            },
            "description": "A collection of requested alerts"
        },
        "ListRoutingKeysResponse": {
            "type": "object",
            "properties": {
                "routingKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RoutingKeyInfo"
                    }
                },
                "_selfUrl": {
                    "type": "string"
                }
            },
            "description": "Info about routing keys in the org",
            "example": {
                "_selfUrl": "_selfUrl",
                "routingKeys": [
                    {
                        "isDefault": true,
                        "targets": [
                            {
                                "policyName": "policyName",
                                "policySlug": "policySlug",
                                "_teamUrl": "_teamUrl"
                            },
                            {
                                "policyName": "policyName",
                                "policySlug": "policySlug",
                                "_teamUrl": "_teamUrl"
                            }
                        ],
                        "routingKey": "routingKey"
                    },
                    {
                        "isDefault": true,
                        "targets": [
                            {
                                "policyName": "policyName",
                                "policySlug": "policySlug",
                                "_teamUrl": "_teamUrl"
                            },
                            {
                                "policyName": "policyName",
                                "policySlug": "policySlug",
                                "_teamUrl": "_teamUrl"
                            }
                        ],
                        "routingKey": "routingKey"
                    }
                ]
            }
        },
        "RoutingKeyInfo": {
            "type": "object",
            "properties": {
                "routingKey": {
                    "type": "string"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RoutingKeyTarget"
                    }
                },
                "isDefault": {
                    "type": "boolean"
                }
            },
            "description": "Routing keys contain the following fields",
            "example": {
                "isDefault": true,
                "targets": [
                    {
                        "policyName": "policyName",
                        "policySlug": "policySlug",
                        "_teamUrl": "_teamUrl"
                    },
                    {
                        "policyName": "policyName",
                        "policySlug": "policySlug",
                        "_teamUrl": "_teamUrl"
                    }
                ],
                "routingKey": "routingKey"
            }
        },
        "RoutingKeyTarget": {
            "type": "object",
            "properties": {
                "policyName": {
                    "type": "string"
                },
                "policySlug": {
                    "type": "string"
                },
                "_teamUrl": {
                    "type": "string"
                }
            },
            "description": "Routing key target",
            "example": {
                "policyName": "policyName",
                "policySlug": "policySlug",
                "_teamUrl": "_teamUrl"
            }
        },
        "Policies": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PagingPolicy"
                    }
                }
            },
            "description": "Paging policies accociated which this user",
            "example": {
                "policies": [
                    {
                        "contactType": "contactType",
                        "extId": "extId",
                        "timeout": 1,
                        "order": 6
                    },
                    {
                        "contactType": "contactType",
                        "extId": "extId",
                        "timeout": 1,
                        "order": 6
                    }
                ],
                "userId": 0,
                "username": "username"
            }
        },
        "PagingPolicy": {
            "type": "object",
            "properties": {
                "order": {
                    "type": "integer"
                },
                "timeout": {
                    "type": "integer"
                },
                "contactType": {
                    "type": "string"
                },
                "extId": {
                    "type": "string"
                }
            },
            "description": "Paging policy fields",
            "example": {
                "contactType": "contactType",
                "extId": "extId",
                "timeout": 1,
                "order": 6
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                }
            },
            "example": {
                "username": "username"
            }
        },
        "Team": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "example": {
                "name": "name",
                "slug": "slug"
            }
        },
        "EscalationPolicy": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "example": {
                "name": "name",
                "slug": "slug"
            }
        },
        "EscalationPolicyList": {
            "type": "object",
            "properties": {
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EscalationPolicy"
                    }
                }
            },
            "example": {
                "policies": [
                    {
                        "name": "name",
                        "slug": "slug"
                    },
                    {
                        "name": "name",
                        "slug": "slug"
                    }
                ]
            }
        },
        "OnCallType": {
            "type": "string",
            "enum": [
                "user",
                "rotation_group",
                "rotation_group_next",
                "rotation_group_previous",
                "team",
                "team_routing",
                "webhook",
                "email",
                "policy_routing"
            ]
        },
        "OnCallRoll": {
            "type": "object",
            "required": [
                "end",
                "isRoll",
                "start"
            ],
            "properties": {
                "start": {
                    "type": "string",
                    "description": "The on-call period start time (ISO 8601)"
                },
                "end": {
                    "type": "string",
                    "description": "The on-call period end time (ISO 8601)"
                },
                "onCallUser": {
                    "$ref": "#/definitions/User"
                },
                "isRoll": {
                    "type": "boolean"
                }
            },
            "example": {
                "start": "start",
                "onCallUser": {
                    "username": "username"
                },
                "end": "end",
                "isRoll": true
            }
        },
        "OnCallOverride": {
            "type": "object",
            "properties": {
                "origOnCallUser": {
                    "$ref": "#/definitions/User"
                },
                "overrideOnCallUser": {
                    "$ref": "#/definitions/User"
                },
                "start": {
                    "type": "string",
                    "description": "The override start time (ISO 8601)"
                },
                "end": {
                    "type": "string",
                    "description": "The override end time (ISO 8601)"
                }
            },
            "example": {
                "overrideOnCallUser": {
                    "username": "username"
                },
                "start": "start",
                "end": "end",
                "origOnCallUser": {
                    "username": "username"
                }
            }
        },
        "OnCallEntry": {
            "type": "object",
            "required": [
                "onCallType",
                "rolls"
            ],
            "properties": {
                "onCallUser": {
                    "$ref": "#/definitions/User"
                },
                "overrideOnCallUser": {
                    "$ref": "#/definitions/User"
                },
                "onCallType": {
                    "$ref": "#/definitions/OnCallType"
                },
                "rotationName": {
                    "type": "string"
                },
                "shiftName": {
                    "type": "string"
                },
                "shiftRoll": {
                    "type": "string",
                    "description": "The shift roll time (ISO 8601)"
                },
                "rolls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OnCallRoll"
                    }
                }
            },
            "example": {
                "shiftName": "shiftName",
                "shiftRoll": "shiftRoll",
                "overrideOnCallUser": {
                    "username": "username"
                },
                "onCallType": {},
                "rotationName": "rotationName",
                "onCallUser": {
                    "username": "username"
                },
                "rolls": [
                    {
                        "start": "start",
                        "onCallUser": {
                            "username": "username"
                        },
                        "end": "end",
                        "isRoll": true
                    },
                    {
                        "start": "start",
                        "onCallUser": {
                            "username": "username"
                        },
                        "end": "end",
                        "isRoll": true
                    }
                ]
            }
        },
        "PolicySchedule": {
            "type": "object",
            "properties": {
                "policy": {
                    "$ref": "#/definitions/EscalationPolicy"
                },
                "schedule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OnCallEntry"
                    }
                },
                "overrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OnCallOverride"
                    }
                }
            },
            "example": {
                "schedule": [
                    {
                        "shiftName": "shiftName",
                        "shiftRoll": "shiftRoll",
                        "overrideOnCallUser": {
                            "username": "username"
                        },
                        "onCallType": {},
                        "rotationName": "rotationName",
                        "onCallUser": {
                            "username": "username"
                        },
                        "rolls": [
                            {
                                "start": "start",
                                "onCallUser": {
                                    "username": "username"
                                },
                                "end": "end",
                                "isRoll": true
                            },
                            {
                                "start": "start",
                                "onCallUser": {
                                    "username": "username"
                                },
                                "end": "end",
                                "isRoll": true
                            }
                        ]
                    },
                    {
                        "shiftName": "shiftName",
                        "shiftRoll": "shiftRoll",
                        "overrideOnCallUser": {
                            "username": "username"
                        },
                        "onCallType": {},
                        "rotationName": "rotationName",
                        "onCallUser": {
                            "username": "username"
                        },
                        "rolls": [
                            {
                                "start": "start",
                                "onCallUser": {
                                    "username": "username"
                                },
                                "end": "end",
                                "isRoll": true
                            },
                            {
                                "start": "start",
                                "onCallUser": {
                                    "username": "username"
                                },
                                "end": "end",
                                "isRoll": true
                            }
                        ]
                    }
                ],
                "overrides": [
                    {
                        "overrideOnCallUser": {
                            "username": "username"
                        },
                        "start": "start",
                        "end": "end",
                        "origOnCallUser": {
                            "username": "username"
                        }
                    },
                    {
                        "overrideOnCallUser": {
                            "username": "username"
                        },
                        "start": "start",
                        "end": "end",
                        "origOnCallUser": {
                            "username": "username"
                        }
                    }
                ],
                "policy": {
                    "name": "name",
                    "slug": "slug"
                }
            }
        },
        "TeamSchedule": {
            "type": "object",
            "properties": {
                "team": {
                    "$ref": "#/definitions/Team"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PolicySchedule"
                    }
                }
            },
            "example": {
                "schedules": [
                    {
                        "schedule": [
                            {
                                "shiftName": "shiftName",
                                "shiftRoll": "shiftRoll",
                                "overrideOnCallUser": {
                                    "username": "username"
                                },
                                "onCallType": {},
                                "rotationName": "rotationName",
                                "onCallUser": {
                                    "username": "username"
                                },
                                "rolls": [
                                    {
                                        "start": "start",
                                        "onCallUser": {
                                            "username": "username"
                                        },
                                        "end": "end",
                                        "isRoll": true
                                    },
                                    {
                                        "start": "start",
                                        "onCallUser": {
                                            "username": "username"
                                        },
                                        "end": "end",
                                        "isRoll": true
                                    }
                                ]
                            },
                            {
                                "shiftName": "shiftName",
                                "shiftRoll": "shiftRoll",
                                "overrideOnCallUser": {
                                    "username": "username"
                                },
                                "onCallType": {},
                                "rotationName": "rotationName",
                                "onCallUser": {
                                    "username": "username"
                                },
                                "rolls": [
                                    {
                                        "start": "start",
                                        "onCallUser": {
                                            "username": "username"
                                        },
                                        "end": "end",
                                        "isRoll": true
                                    },
                                    {
                                        "start": "start",
                                        "onCallUser": {
                                            "username": "username"
                                        },
                                        "end": "end",
                                        "isRoll": true
                                    }
                                ]
                            }
                        ],
                        "overrides": [
                            {
                                "overrideOnCallUser": {
                                    "username": "username"
                                },
                                "start": "start",
                                "end": "end",
                                "origOnCallUser": {
                                    "username": "username"
                                }
                            },
                            {
                                "overrideOnCallUser": {
                                    "username": "username"
                                },
                                "start": "start",
                                "end": "end",
                                "origOnCallUser": {
                                    "username": "username"
                                }
                            }
                        ],
                        "policy": {
                            "name": "name",
                            "slug": "slug"
                        }
                    },
                    {
                        "schedule": [
                            {
                                "shiftName": "shiftName",
                                "shiftRoll": "shiftRoll",
                                "overrideOnCallUser": {
                                    "username": "username"
                                },
                                "onCallType": {},
                                "rotationName": "rotationName",
                                "onCallUser": {
                                    "username": "username"
                                },
                                "rolls": [
                                    {
                                        "start": "start",
                                        "onCallUser": {
                                            "username": "username"
                                        },
                                        "end": "end",
                                        "isRoll": true
                                    },
                                    {
                                        "start": "start",
                                        "onCallUser": {
                                            "username": "username"
                                        },
                                        "end": "end",
                                        "isRoll": true
                                    }
                                ]
                            },
                            {
                                "shiftName": "shiftName",
                                "shiftRoll": "shiftRoll",
                                "overrideOnCallUser": {
                                    "username": "username"
                                },
                                "onCallType": {},
                                "rotationName": "rotationName",
                                "onCallUser": {
                                    "username": "username"
                                },
                                "rolls": [
                                    {
                                        "start": "start",
                                        "onCallUser": {
                                            "username": "username"
                                        },
                                        "end": "end",
                                        "isRoll": true
                                    },
                                    {
                                        "start": "start",
                                        "onCallUser": {
                                            "username": "username"
                                        },
                                        "end": "end",
                                        "isRoll": true
                                    }
                                ]
                            }
                        ],
                        "overrides": [
                            {
                                "overrideOnCallUser": {
                                    "username": "username"
                                },
                                "start": "start",
                                "end": "end",
                                "origOnCallUser": {
                                    "username": "username"
                                }
                            },
                            {
                                "overrideOnCallUser": {
                                    "username": "username"
                                },
                                "start": "start",
                                "end": "end",
                                "origOnCallUser": {
                                    "username": "username"
                                }
                            }
                        ],
                        "policy": {
                            "name": "name",
                            "slug": "slug"
                        }
                    }
                ],
                "team": {
                    "name": "name",
                    "slug": "slug"
                }
            }
        },
        "UserSchedule": {
            "type": "object",
            "properties": {
                "teamSchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TeamSchedule"
                    }
                }
            },
            "example": {
                "teamSchedules": [
                    {
                        "schedules": [
                            {
                                "schedule": [
                                    {
                                        "shiftName": "shiftName",
                                        "shiftRoll": "shiftRoll",
                                        "overrideOnCallUser": {
                                            "username": "username"
                                        },
                                        "onCallType": {},
                                        "rotationName": "rotationName",
                                        "onCallUser": {
                                            "username": "username"
                                        },
                                        "rolls": [
                                            {
                                                "start": "start",
                                                "onCallUser": {
                                                    "username": "username"
                                                },
                                                "end": "end",
                                                "isRoll": true
                                            },
                                            {
                                                "start": "start",
                                                "onCallUser": {
                                                    "username": "username"
                                                },
                                                "end": "end",
                                                "isRoll": true
                                            }
                                        ]
                                    },
                                    {
                                        "shiftName": "shiftName",
                                        "shiftRoll": "shiftRoll",
                                        "overrideOnCallUser": {
                                            "username": "username"
                                        },
                                        "onCallType": {},
                                        "rotationName": "rotationName",
                                        "onCallUser": {
                                            "username": "username"
                                        },
                                        "rolls": [
                                            {
                                                "start": "start",
                                                "onCallUser": {
                                                    "username": "username"
                                                },
                                                "end": "end",
                                                "isRoll": true
                                            },
                                            {
                                                "start": "start",
                                                "onCallUser": {
                                                    "username": "username"
                                                },
                                                "end": "end",
                                                "isRoll": true
                                            }
                                        ]
                                    }
                                ],
                                "overrides": [
                                    {
                                        "overrideOnCallUser": {
                                            "username": "username"
                                        },
                                        "start": "start",
                                        "end": "end",
                                        "origOnCallUser": {
                                            "username": "username"
                                        }
                                    },
                                    {
                                        "overrideOnCallUser": {
                                            "username": "username"
                                        },
                                        "start": "start",
                                        "end": "end",
                                        "origOnCallUser": {
                                            "username": "username"
                                        }
                                    }
                                ],
                                "policy": {
                                    "name": "name",
                                    "slug": "slug"
                                }
                            },
                            {
                                "schedule": [
                                    {
                                        "shiftName": "shiftName",
                                        "shiftRoll": "shiftRoll",
                                        "overrideOnCallUser": {
                                            "username": "username"
                                        },
                                        "onCallType": {},
                                        "rotationName": "rotationName",
                                        "onCallUser": {
                                            "username": "username"
                                        },
                                        "rolls": [
                                            {
                                                "start": "start",
                                                "onCallUser": {
                                                    "username": "username"
                                                },
                                                "end": "end",
                                                "isRoll": true
                                            },
                                            {
                                                "start": "start",
                                                "onCallUser": {
                                                    "username": "username"
                                                },
                                                "end": "end",
                                                "isRoll": true
                                            }
                                        ]
                                    },
                                    {
                                        "shiftName": "shiftName",
                                        "shiftRoll": "shiftRoll",
                                        "overrideOnCallUser": {
                                            "username": "username"
                                        },
                                        "onCallType": {},
                                        "rotationName": "rotationName",
                                        "onCallUser": {
                                            "username": "username"
                                        },
                                        "rolls": [
                                            {
                                                "start": "start",
                                                "onCallUser": {
                                                    "username": "username"
                                                },
                                                "end": "end",
                                                "isRoll": true
                                            },
                                            {
                                                "start": "start",
                                                "onCallUser": {
                                                    "username": "username"
                                                },
                                                "end": "end",
                                                "isRoll": true
                                            }
                                        ]
                                    }
                                ],
                                "overrides": [
                                    {
                                        "overrideOnCallUser": {
                                            "username": "username"
                                        },
                                        "start": "start",
                                        "end": "end",
                                        "origOnCallUser": {
                                            "username": "username"
                                        }
                                    },
                                    {
                                        "overrideOnCallUser": {
                                            "username": "username"
                                        },
                                        "start": "start",
                                        "end": "end",
                                        "origOnCallUser": {
                                            "username": "username"
                                        }
                                    }
                                ],
                                "policy": {
                                    "name": "name",
                                    "slug": "slug"
                                }
                            }
                        ],
                        "team": {
                            "name": "name",
                            "slug": "slug"
                        }
                    },
                    {
                        "schedules": [
                            {
                                "schedule": [
                                    {
                                        "shiftName": "shiftName",
                                        "shiftRoll": "shiftRoll",
                                        "overrideOnCallUser": {
                                            "username": "username"
                                        },
                                        "onCallType": {},
                                        "rotationName": "rotationName",
                                        "onCallUser": {
                                            "username": "username"
                                        },
                                        "rolls": [
                                            {
                                                "start": "start",
                                                "onCallUser": {
                                                    "username": "username"
                                                },
                                                "end": "end",
                                                "isRoll": true
                                            },
                                            {
                                                "start": "start",
                                                "onCallUser": {
                                                    "username": "username"
                                                },
                                                "end": "end",
                                                "isRoll": true
                                            }
                                        ]
                                    },
                                    {
                                        "shiftName": "shiftName",
                                        "shiftRoll": "shiftRoll",
                                        "overrideOnCallUser": {
                                            "username": "username"
                                        },
                                        "onCallType": {},
                                        "rotationName": "rotationName",
                                        "onCallUser": {
                                            "username": "username"
                                        },
                                        "rolls": [
                                            {
                                                "start": "start",
                                                "onCallUser": {
                                                    "username": "username"
                                                },
                                                "end": "end",
                                                "isRoll": true
                                            },
                                            {
                                                "start": "start",
                                                "onCallUser": {
                                                    "username": "username"
                                                },
                                                "end": "end",
                                                "isRoll": true
                                            }
                                        ]
                                    }
                                ],
                                "overrides": [
                                    {
                                        "overrideOnCallUser": {
                                            "username": "username"
                                        },
                                        "start": "start",
                                        "end": "end",
                                        "origOnCallUser": {
                                            "username": "username"
                                        }
                                    },
                                    {
                                        "overrideOnCallUser": {
                                            "username": "username"
                                        },
                                        "start": "start",
                                        "end": "end",
                                        "origOnCallUser": {
                                            "username": "username"
                                        }
                                    }
                                ],
                                "policy": {
                                    "name": "name",
                                    "slug": "slug"
                                }
                            },
                            {
                                "schedule": [
                                    {
                                        "shiftName": "shiftName",
                                        "shiftRoll": "shiftRoll",
                                        "overrideOnCallUser": {
                                            "username": "username"
                                        },
                                        "onCallType": {},
                                        "rotationName": "rotationName",
                                        "onCallUser": {
                                            "username": "username"
                                        },
                                        "rolls": [
                                            {
                                                "start": "start",
                                                "onCallUser": {
                                                    "username": "username"
                                                },
                                                "end": "end",
                                                "isRoll": true
                                            },
                                            {
                                                "start": "start",
                                                "onCallUser": {
                                                    "username": "username"
                                                },
                                                "end": "end",
                                                "isRoll": true
                                            }
                                        ]
                                    },
                                    {
                                        "shiftName": "shiftName",
                                        "shiftRoll": "shiftRoll",
                                        "overrideOnCallUser": {
                                            "username": "username"
                                        },
                                        "onCallType": {},
                                        "rotationName": "rotationName",
                                        "onCallUser": {
                                            "username": "username"
                                        },
                                        "rolls": [
                                            {
                                                "start": "start",
                                                "onCallUser": {
                                                    "username": "username"
                                                },
                                                "end": "end",
                                                "isRoll": true
                                            },
                                            {
                                                "start": "start",
                                                "onCallUser": {
                                                    "username": "username"
                                                },
                                                "end": "end",
                                                "isRoll": true
                                            }
                                        ]
                                    }
                                ],
                                "overrides": [
                                    {
                                        "overrideOnCallUser": {
                                            "username": "username"
                                        },
                                        "start": "start",
                                        "end": "end",
                                        "origOnCallUser": {
                                            "username": "username"
                                        }
                                    },
                                    {
                                        "overrideOnCallUser": {
                                            "username": "username"
                                        },
                                        "start": "start",
                                        "end": "end",
                                        "origOnCallUser": {
                                            "username": "username"
                                        }
                                    }
                                ],
                                "policy": {
                                    "name": "name",
                                    "slug": "slug"
                                }
                            }
                        ],
                        "team": {
                            "name": "name",
                            "slug": "slug"
                        }
                    }
                ]
            }
        },
        "EscalationPolicyInfo": {
            "type": "object",
            "required": [
                "policy"
            ],
            "properties": {
                "policy": {
                    "$ref": "#/definitions/EscalationPolicy"
                },
                "team": {
                    "$ref": "#/definitions/Team"
                }
            },
            "example": {
                "team": {
                    "name": "name",
                    "slug": "slug"
                },
                "policy": {
                    "name": "name",
                    "slug": "slug"
                }
            }
        },
        "EscalationPolicyInfoList": {
            "type": "object",
            "required": [
                "policies"
            ],
            "properties": {
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EscalationPolicyInfo"
                    }
                }
            },
            "example": {
                "policies": [
                    {
                        "team": {
                            "name": "name",
                            "slug": "slug"
                        },
                        "policy": {
                            "name": "name",
                            "slug": "slug"
                        }
                    },
                    {
                        "team": {
                            "name": "name",
                            "slug": "slug"
                        },
                        "policy": {
                            "name": "name",
                            "slug": "slug"
                        }
                    }
                ]
            }
        },
        "RerouteCollection": {
            "type": "object",
            "required": [
                "reroutes",
                "userName"
            ],
            "properties": {
                "userName": {
                    "type": "string"
                },
                "reroutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Reroute"
                    }
                }
            },
            "example": {
                "reroutes": [
                    {
                        "incidentNumber": "incidentNumber",
                        "targets": [
                            {
                                "type": "User",
                                "slug": "slug"
                            },
                            {
                                "type": "User",
                                "slug": "slug"
                            }
                        ]
                    },
                    {
                        "incidentNumber": "incidentNumber",
                        "targets": [
                            {
                                "type": "User",
                                "slug": "slug"
                            },
                            {
                                "type": "User",
                                "slug": "slug"
                            }
                        ]
                    }
                ],
                "userName": "userName"
            }
        },
        "Reroute": {
            "type": "object",
            "required": [
                "incidentNumber",
                "targets"
            ],
            "properties": {
                "incidentNumber": {
                    "type": "string"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IncidentTarget"
                    }
                }
            },
            "example": {
                "incidentNumber": "incidentNumber",
                "targets": [
                    {
                        "type": "User",
                        "slug": "slug"
                    },
                    {
                        "type": "User",
                        "slug": "slug"
                    }
                ]
            }
        },
        "RerouteStatusResponse": {
            "type": "object",
            "properties": {
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RerouteStatus"
                    }
                }
            },
            "example": {
                "statuses": [
                    {
                        "success": true,
                        "targetStatus": [
                            {
                                "success": true,
                                "message": "message",
                                "slug": "slug"
                            },
                            {
                                "success": true,
                                "message": "message",
                                "slug": "slug"
                            }
                        ],
                        "message": "message",
                        "incidentNumber": "incidentNumber"
                    },
                    {
                        "success": true,
                        "targetStatus": [
                            {
                                "success": true,
                                "message": "message",
                                "slug": "slug"
                            },
                            {
                                "success": true,
                                "message": "message",
                                "slug": "slug"
                            }
                        ],
                        "message": "message",
                        "incidentNumber": "incidentNumber"
                    }
                ]
            }
        },
        "RerouteStatus": {
            "type": "object",
            "required": [
                "incidentNumber",
                "success",
                "targetStatus"
            ],
            "properties": {
                "incidentNumber": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "targetStatus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RerouteTargetStatus"
                    }
                },
                "message": {
                    "type": "string"
                }
            },
            "example": {
                "success": true,
                "targetStatus": [
                    {
                        "success": true,
                        "message": "message",
                        "slug": "slug"
                    },
                    {
                        "success": true,
                        "message": "message",
                        "slug": "slug"
                    }
                ],
                "message": "message",
                "incidentNumber": "incidentNumber"
            }
        },
        "RerouteTargetStatus": {
            "type": "object",
            "required": [
                "slug",
                "success"
            ],
            "properties": {
                "slug": {
                    "type": "string",
                    "description": "User name or escalation policy slug"
                },
                "success": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                }
            },
            "example": {
                "success": true,
                "message": "message",
                "slug": "slug"
            }
        },
        "Contact": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "number"
                },
                "type": {
                    "$ref": "#/definitions/ContactType"
                }
            },
            "example": {
                "id": 1.4658129805029452,
                "type": {}
            }
        },
        "PagingPolicyStepRule": {
            "type": "object",
            "properties": {
                "index": {
                    "type": "number"
                },
                "type": {
                    "$ref": "#/definitions/NotificationType"
                },
                "contact": {
                    "$ref": "#/definitions/Contact"
                }
            },
            "example": {
                "contact": {
                    "id": 1.4658129805029452,
                    "type": {}
                },
                "index": 6.027456183070403,
                "type": "email"
            }
        },
        "PagingPolicyStepRuleAdd": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/NotificationType"
                },
                "contact": {
                    "$ref": "#/definitions/Contact"
                }
            },
            "example": {
                "contact": {
                    "id": 1.4658129805029452,
                    "type": {}
                },
                "type": "email"
            }
        },
        "PagingPolicyStep": {
            "type": "object",
            "properties": {
                "index": {
                    "type": "number"
                },
                "timeout": {
                    "$ref": "#/definitions/TimeoutType"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PagingPolicyStepRule"
                    }
                }
            },
            "example": {
                "index": 0.8008281904610115,
                "rules": [
                    {
                        "contact": {
                            "id": 1.4658129805029452,
                            "type": {}
                        },
                        "index": 6.027456183070403,
                        "type": "email"
                    },
                    {
                        "contact": {
                            "id": 1.4658129805029452,
                            "type": {}
                        },
                        "index": 6.027456183070403,
                        "type": "email"
                    }
                ],
                "timeout": {}
            }
        },
        "UserPagingPolicy": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/PagingPolicyStep"
            }
        },
        "TeamAndPolicies": {
            "type": "object",
            "properties": {
                "team": {
                    "$ref": "#/definitions/Team"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EscalationPolicy"
                    }
                }
            }
        },
        "AddGroupPayload": {
            "type": "object",
            "properties": {
                "timeout": {
                    "$ref": "#/definitions/TimeoutType"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PagingPolicyStepRuleAdd"
                    }
                }
            },
            "example": {
                "rules": [
                    {
                        "contact": {
                            "id": 1.4658129805029452,
                            "type": {}
                        },
                        "type": "email"
                    },
                    {
                        "contact": {
                            "id": 1.4658129805029452,
                            "type": {}
                        },
                        "type": "email"
                    }
                ],
                "timeout": {}
            }
        },
        "AddStepPayload": {
            "type": "object",
            "properties": {
                "contact": {
                    "$ref": "#/definitions/Contact"
                },
                "type": {
                    "$ref": "#/definitions/NotificationType"
                }
            },
            "example": {
                "contact": {
                    "id": 1.4658129805029452,
                    "type": {}
                },
                "type": "email"
            }
        },
        "ContactType": {
            "type": "string",
            "enum": [
                "email",
                "phone"
            ]
        },
        "ContactDescription": {
            "type": "string",
            "enum": [
                "Email Address",
                "Phone Number"
            ]
        },
        "ContactObject": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/ContactType"
                },
                "description": {
                    "$ref": "#/definitions/ContactDescription"
                }
            },
            "example": {
                "description": {},
                "type": {}
            }
        },
        "NotificationType": {
            "type": "string",
            "example": "email",
            "enum": [
                "push",
                "email",
                "sms",
                "phone"
            ]
        },
        "NotificationDescription": {
            "type": "string",
            "enum": [
                "Send a push notification to all my devices",
                "Send an email to an email address",
                "Send an SMS to a phone number",
                "Make a phone call to a phone number"
            ]
        },
        "NotificationObject": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/NotificationType"
                },
                "description": {
                    "$ref": "#/definitions/NotificationDescription"
                }
            },
            "example": {
                "description": {},
                "type": "email"
            }
        },
        "TimeoutType": {
            "type": "integer",
            "enum": [
                "1",
                "5",
                "10",
                "15",
                "20",
                "25",
                "30",
                "45",
                "60"
            ]
        },
        "TimeoutDescription": {
            "type": "string",
            "enum": [
                "If still unacked after 1 minute",
                "If still unacked after 5 minute",
                "If still unacked after 10 minute",
                "If still unacked after 15 minute",
                "If still unacked after 20 minute",
                "If still unacked after 25 minute",
                "If still unacked after 30 minute",
                "If still unacked after 45 minute",
                "If still unacked after 60 minute"
            ]
        },
        "TimeoutObject": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/TimeoutType"
                },
                "description": {
                    "$ref": "#/definitions/TimeoutDescription"
                }
            },
            "example": {
                "description": {},
                "type": {}
            }
        },
        "inline_response_200": {
            "properties": {
                "notificationTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NotificationObject"
                    }
                },
                "_selfUrl": {
                    "type": "string"
                }
            },
            "example": {
                "_selfUrl": "_selfUrl",
                "notificationTypes": [
                    {
                        "description": {},
                        "type": "email"
                    },
                    {
                        "description": {},
                        "type": "email"
                    }
                ]
            }
        },
        "inline_response_200_1": {
            "properties": {
                "contactTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactObject"
                    }
                },
                "_selfUrl": {
                    "type": "string"
                }
            },
            "example": {
                "_selfUrl": "_selfUrl",
                "contactTypes": [
                    {
                        "description": {},
                        "type": {}
                    },
                    {
                        "description": {},
                        "type": {}
                    }
                ]
            }
        },
        "inline_response_200_2": {
            "properties": {
                "timeoutTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TimeoutObject"
                    }
                },
                "_selfUrl": {
                    "type": "string"
                }
            },
            "example": {
                "_selfUrl": "_selfUrl",
                "timeoutTypes": [
                    {
                        "description": {},
                        "type": {}
                    },
                    {
                        "description": {},
                        "type": {}
                    }
                ]
            }
        },
        "inline_response_200_3": {
            "properties": {
                "steps": {
                    "$ref": "#/definitions/UserPagingPolicy"
                },
                "_selfUrl": {
                    "type": "string"
                }
            },
            "example": {
                "_selfUrl": "_selfUrl",
                "steps": ""
            }
        },
        "inline_response_200_4": {
            "properties": {
                "step": {
                    "$ref": "#/definitions/PagingPolicyStep"
                },
                "_selfUrl": {
                    "type": "string"
                }
            },
            "example": {
                "_selfUrl": "_selfUrl",
                "step": {
                    "index": 0.8008281904610115,
                    "rules": [
                        {
                            "contact": {
                                "id": 1.4658129805029452,
                                "type": {}
                            },
                            "index": 6.027456183070403,
                            "type": "email"
                        },
                        {
                            "contact": {
                                "id": 1.4658129805029452,
                                "type": {}
                            },
                            "index": 6.027456183070403,
                            "type": "email"
                        }
                    ],
                    "timeout": {}
                }
            }
        },
        "inline_response_200_5": {
            "properties": {
                "stepRule": {
                    "$ref": "#/definitions/PagingPolicyStepRule"
                },
                "_selfUrl": {
                    "type": "string"
                }
            },
            "example": {
                "_selfUrl": "_selfUrl",
                "stepRule": {
                    "contact": {
                        "id": 1.4658129805029452,
                        "type": {}
                    },
                    "index": 6.027456183070403,
                    "type": "email"
                }
            }
        },
        "inline_response_200_6": {
            "properties": {
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactDevice"
                    }
                },
                "emails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserContact"
                    }
                },
                "phones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserContact"
                    }
                }
            },
            "example": {
                "emails": [
                    {
                        "deviceType": "deviceType",
                        "_selfUrl": "_selfUrl",
                        "label": "label",
                        "extId": "extId"
                    },
                    {
                        "deviceType": "deviceType",
                        "_selfUrl": "_selfUrl",
                        "label": "label",
                        "extId": "extId"
                    }
                ],
                "devices": [
                    {
                        "deviceType": "deviceType",
                        "_selfUrl": "_selfUrl",
                        "label": "label",
                        "extId": "extId"
                    },
                    {
                        "deviceType": "deviceType",
                        "_selfUrl": "_selfUrl",
                        "label": "label",
                        "extId": "extId"
                    }
                ],
                "phones": [
                    {
                        "deviceType": "deviceType",
                        "_selfUrl": "_selfUrl",
                        "label": "label",
                        "extId": "extId"
                    },
                    {
                        "deviceType": "deviceType",
                        "_selfUrl": "_selfUrl",
                        "label": "label",
                        "extId": "extId"
                    }
                ]
            }
        },
        "inline_response_200_7": {
            "properties": {
                "teamsOnCall": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OnCallTeamsResource"
                    }
                }
            },
            "example": {
                "teamsOnCall": [
                    {
                        "onCallNow": [
                            {
                                "escalationPolicy": {
                                    "name": "name",
                                    "slug": "slug"
                                },
                                "users": [
                                    {
                                        "onCallUser": {
                                            "username": "username"
                                        }
                                    },
                                    {
                                        "onCallUser": {
                                            "username": "username"
                                        }
                                    }
                                ]
                            },
                            {
                                "escalationPolicy": {
                                    "name": "name",
                                    "slug": "slug"
                                },
                                "users": [
                                    {
                                        "onCallUser": {
                                            "username": "username"
                                        }
                                    },
                                    {
                                        "onCallUser": {
                                            "username": "username"
                                        }
                                    }
                                ]
                            }
                        ],
                        "team": {
                            "name": "name",
                            "slug": "slug"
                        }
                    },
                    {
                        "onCallNow": [
                            {
                                "escalationPolicy": {
                                    "name": "name",
                                    "slug": "slug"
                                },
                                "users": [
                                    {
                                        "onCallUser": {
                                            "username": "username"
                                        }
                                    },
                                    {
                                        "onCallUser": {
                                            "username": "username"
                                        }
                                    }
                                ]
                            },
                            {
                                "escalationPolicy": {
                                    "name": "name",
                                    "slug": "slug"
                                },
                                "users": [
                                    {
                                        "onCallUser": {
                                            "username": "username"
                                        }
                                    },
                                    {
                                        "onCallUser": {
                                            "username": "username"
                                        }
                                    }
                                ]
                            }
                        ],
                        "team": {
                            "name": "name",
                            "slug": "slug"
                        }
                    }
                ]
            }
        },
        "OnCallUsersResource_onCallUser": {
            "properties": {
                "username": {
                    "type": "string"
                }
            },
            "example": {
                "username": "username"
            }
        },
        "UserLog_total": {
            "properties": {
                "hours": {
                    "type": "number"
                },
                "minutes": {
                    "type": "number"
                }
            },
            "example": {
                "hours": 0.8008281904610115,
                "minutes": 6.027456183070403
            }
        }
    },
    "parameters": {
        "apiId": {
            "name": "X-VO-Api-Id",
            "in": "header",
            "description": "Your API ID",
            "required": true,
            "type": "string",
            "x-exportParamName": "XVOApiId"
        },
        "apiKey": {
            "name": "X-VO-Api-Key",
            "in": "header",
            "description": "Your API Key",
            "required": true,
            "type": "string",
            "x-exportParamName": "XVOApiKey"
        },
        "limit": {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of matching incidents to return (100 max)",
            "required": false,
            "type": "number",
            "default": 20,
            "maximum": 100,
            "x-exportParamName": "Limit"
        },
        "offset": {
            "name": "offset",
            "in": "query",
            "description": "The offset within the set of matching incidents",
            "required": false,
            "type": "number",
            "default": 0,
            "x-exportParamName": "Offset"
        },
        "addUserPayload": {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
                "$ref": "#/definitions/AddUserPayload"
            },
            "x-exportParamName": "Body"
        },
        "addUserPayloadV2": {
            "in": "body",
            "name": "body",
            "description": "The user information",
            "required": true,
            "schema": {
                "type": "object",
                "required": [
                    "email",
                    "firstName",
                    "lastName",
                    "username"
                ],
                "properties": {
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "format": "email"
                    }
                }
            }
        },
        "deleteUserPayload": {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
                "$ref": "#/definitions/DeleteUserPayload"
            },
            "x-exportParamName": "Body"
        },
        "takeRequestPayload": {
            "in": "body",
            "name": "body",
            "description": "The take on-call payload",
            "required": true,
            "schema": {
                "$ref": "#/definitions/TakeRequest"
            },
            "x-exportParamName": "Body"
        },
        "createIncidentPayload": {
            "in": "body",
            "name": "body",
            "description": "The incident details",
            "required": true,
            "schema": {
                "$ref": "#/definitions/CreateIncidentRequest"
            },
            "x-exportParamName": "Body"
        },
        "ackResolvePayload": {
            "in": "body",
            "name": "body",
            "description": "Ack/Resolve payload",
            "required": true,
            "schema": {
                "$ref": "#/definitions/AckOrResolveRequest"
            },
            "x-exportParamName": "Body"
        },
        "ackResolveByUserPayload": {
            "in": "body",
            "name": "body",
            "description": "Ack/Resolve payload",
            "required": true,
            "schema": {
                "$ref": "#/definitions/AckOrResolveByUserRequest"
            },
            "x-exportParamName": "Body"
        },
        "daysFwd": {
            "name": "daysForward",
            "in": "query",
            "description": "Days to include in returned schedule (30 max)",
            "required": false,
            "type": "number",
            "default": 14,
            "maximum": 30,
            "minimum": 0,
            "x-exportParamName": "DaysForward"
        },
        "daysSkip": {
            "name": "daysSkip",
            "in": "query",
            "description": "Days to skip before computing schedule to return (90 max)",
            "required": false,
            "type": "number",
            "default": 0,
            "maximum": 90,
            "minimum": 0,
            "x-exportParamName": "DaysSkip"
        },
        "step": {
            "name": "step",
            "in": "query",
            "description": "Step of escalation policy (3 max)",
            "required": false,
            "type": "number",
            "default": 0,
            "maximum": 3,
            "minimum": 0,
            "x-exportParamName": "Step"
        },
        "contactDeviceAdd": {
            "in": "body",
            "name": "body",
            "description": "The contact device",
            "required": true,
            "schema": {
                "$ref": "#/definitions/ContactDeviceAdd"
            },
            "x-exportParamName": "Body"
        },
        "contactEmailAdd": {
            "in": "body",
            "name": "body",
            "description": "The contact email",
            "required": true,
            "schema": {
                "$ref": "#/definitions/ContactEmailAdd"
            },
            "x-exportParamName": "Body"
        },
        "contactPhoneAdd": {
            "in": "body",
            "name": "body",
            "description": "The contact phone",
            "required": true,
            "schema": {
                "$ref": "#/definitions/ContactPhoneAdd"
            },
            "x-exportParamName": "Body"
        },
        "addTeamPayload": {
            "in": "body",
            "name": "body",
            "description": "The team information",
            "required": true,
            "schema": {
                "$ref": "#/definitions/AddTeamPayload"
            },
            "x-exportParamName": "Body"
        },
        "addTeamMemberPayload": {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
                "$ref": "#/definitions/AddTeamMemberPayload"
            },
            "x-exportParamName": "Body"
        },
        "removeTeamMemberPayload": {
            "in": "body",
            "name": "body",
            "description": "The user information",
            "required": true,
            "schema": {
                "$ref": "#/definitions/RemoveTeamMemberPayload"
            },
            "x-exportParamName": "Body"
        },
        "rerouteBody": {
            "in": "body",
            "name": "body",
            "description": "The reroute rules",
            "required": true,
            "schema": {
                "$ref": "#/definitions/RerouteCollection"
            },
            "x-exportParamName": "Body"
        },
        "orgSlug": {
            "name": "org",
            "in": "path",
            "description": "Your organization slug",
            "required": true,
            "type": "string"
        },
        "username": {
            "name": "username",
            "in": "path",
            "description": "Your username",
            "required": true,
            "type": "string",
            "x-exportParamName": "Username"
        },
        "pagingPolicyStep": {
            "name": "step",
            "in": "path",
            "description": "Paging policy step",
            "required": true,
            "type": "number",
            "x-exportParamName": "Step"
        },
        "pagingPolicyRule": {
            "name": "rule",
            "in": "path",
            "description": "Rule for a paging policy step",
            "required": true,
            "type": "number",
            "x-exportParamName": "Rule"
        },
        "addGroupPayload": {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
                "$ref": "#/definitions/AddGroupPayload"
            },
            "x-exportParamName": "Body"
        },
        "addStepPayload": {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
                "$ref": "#/definitions/AddStepPayload"
            },
            "x-exportParamName": "Body"
        }
    },
    "responses": {
        "400": {
            "description": "Problem with the request arguments.  The response payload may include an error message."
        },
        "401": {
            "description": "Authentication parameters missing"
        },
        "403": {
            "description": "Authentication failed or rate-limit reached"
        },
        "404": {
            "description": "Path not found"
        },
        "500": {
            "description": "Internal Server Error"
        },
        "team-not-found": {
            "description": "Team not found"
        },
        "user-not-found": {
            "description": "User not found"
        }
    }
}
